[{"title":"Producer","url":"https:\/\/tubm.tokyo\/artist_category\/producer\/","text":"TUBMからリリースしたProducerのリストです:\n\nNSS\nHummingbird\nViral\nKillA808"},{"title":"Mixing & Mastering Engineer","url":"https:\/\/tubm.tokyo\/artist_category\/mixing-mastering-engineer\/","text":"TUBMのサウンドエンジニアのリストです。\n\nKillA808"},{"title":"Beat Maker","url":"https:\/\/tubm.tokyo\/artist_category\/beat-maker\/","text":"TUBMからリリースしたBeat Makerのリストです。\n\nTheInvaezn\nHayatobeatz"},{"title":"Artist","url":"https:\/\/tubm.tokyo\/artist_category\/artist\/","text":"TUBMに所属、またはTUBMからリリースしたアーティストのリストです。\n\nPAZOODOG\nRAGGA-G\nT-MAN\nTAMA ANT\nManish-T\nキムライオン\nNeo Nao\nGash"},{"title":"PAZOODOG","url":"https:\/\/tubm.tokyo\/artist\/pazoodog\/","text":"PAZOODOG\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nInstagram\n\nReleases:\nScent of Dreams\nSamurai Switch\nDUBBLE UP\nSAYONARA\nSOUNDTRIP\nNight on Earth\nPAZOODOG 2020 EP\n\nTokyo Underground Beatz MassiveのAceラッパーです。\n\nヒップホップとレゲエをクロスオーバーする自由な音楽性で活動するMC。\nPAZOODOGにしか出せないリリック、フローで聴くひとたちを魅了している\n2021.2023とiTunesチャートではシングル、EP共に1位を獲得（日本）\n音楽の他にも服をデザインするなど、オリジナルスタイルを生み出している\n\n彼の作品には、ドリル、ヒップホップ、レゲエなどの多数のジャンルが含まれています。\n\nロックという名前の愛犬を飼っています。"},{"title":"RAGGA-G","url":"https:\/\/tubm.tokyo\/artist\/ragga-g\/","text":"RAGGA-G\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nInstagram\nTwitter\n\nReleases: \nFollow Wi Now\nジャメイカの音楽で\nTAX\nSamurai Switch\nSAYONARA\nSOUNDTRIP                                                                                          \n\n1990年前半、都内CLUBを中心にReggae Deejayの活動を開始。\nV.I.P Internationalのコンピレーション･アルバムへの参加をキッカケに全国区へ活動の場を広げる。\n\n数々のレゲエ･コンピレーション参加やHIP HOPアーティストなどとの共演を経て、2004年 CRYSTAL MOVEMENTのメンバーとしてDEF JAM JAPAN –UNIVERSAL–よりメジャー･デビュー!!\n歌とラップを共にこなす独特なシングジェイ･スタイル!!\nライムフロウと味のあるリリックスが定評で、各地に根強いファンを持つ人気アーティスト。\n\n2011年には自身が所属運営するB-REGGER’Sより\n配信EP｢G’sWORLD｣とSoloAlbum｢NOT TOO LATE]を配信‼️\n\nその後もリリースを重ねB-REGGER’Sが主催する渋谷BALLのイベントSUBWAYをオーガナイズし、10年以上続く熱量の高いHOTなPARTYを維持し続けている。"},{"title":"Gash","url":"https:\/\/tubm.tokyo\/artist\/gash\/","text":"Gash\n\nListen on Spotify\nListen on Apple Music\nInstagram\n\nReleases:\nChakuchi                                                                                          "},{"title":"KillA808","url":"https:\/\/tubm.tokyo\/artist\/killa808\/","text":"KillA808\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nInstagram Twitter\nListen on Soundcloud\nDrum&Bass Page\n\nReleases:\nFollow Wi Now\nScent of Dreams\nジャメイカの音楽で\nSamurai Switch\nChill Intense 2020ish (Instrumental)\nSOUNDTRIP\nNight on Earth\nPAZOODOG 2020 EP\n\nKillA808は、実はDrum&BassのProducerだと言う噂もありますが定かではありません。しかしドラムンベースやレゲエ、Drill, Grime, Footworkなど多彩なジャンルに影響を受けたプロデューサーである事は間違いないです。\n彼が手がける多数の楽曲はiTunesチャートで常に１位、または上位を獲得しています。\n\nSound Engineerでもあります。"},{"title":"Hayatobeatz","url":"https:\/\/tubm.tokyo\/artist\/hayatobeatz\/","text":"Hayatobeatz\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nInstagram\nListen on Soundcloud \n\nReleases:\nジャメイカの音楽で\nChill Intense 2020ish (Instrumental)\nSAYONARA\nSOUNDTRIP\nChakuchi\nPAZOODOG 2020 EP\n\nHayatobeatzの得意とするスタイルはスムーズでメロディックなビートです。主にサンプリングを重視しています。メロディーのセンスやインスピレーションに定評があるビートメイカーです。\n\nまた大変猫好きとして知られていて、様々な猫を飼っています。"},{"title":"Neo Nao","url":"https:\/\/tubm.tokyo\/artist\/neo-nao\/","text":"Neo Nao\n\nListen on Spotify\nListen on Apple Music\nInstagram\n\nReleases:\nChakuchi                                                                                          "},{"title":"キムライオン","url":"https:\/\/tubm.tokyo\/artist\/kimlion\/","text":"キムライオン\n\nWatch on YouTube\n\nReleases:\nDUBBLE UP                                                                                          \n\nカテキンによって殺菌された静岡発のイケメングループ『リバスタ』の片割れです。"},{"title":"Hummingbird","url":"https:\/\/tubm.tokyo\/artist\/hummingbird\/","text":"Hummingbird\n\nWebsite (https:\/\/hummingbirdub.studio.site\/)\nListen on Spotify\nListen on Apple Music\nInstagram\nTwitter\nFacebook\nBandcamp\n\nReleases:\nDUBBLE UP\n\n東京在住のプロデューサー、トラックメーカー。\nDUBの手法を中心にフリーフォームなトラックを制作。\n\nリアルタイムでのLIVE DUB MIX は国内だけでなくスペインで開催された野外レゲエフェス「A Pobra Reggae fest」に出演などアジア各国、ヨーロッパなど世界中で精力的に行っている。\n\n世界中のアーティストをfeatしDUBの様々な可能性を提示するEP 「BLIND FOR DUB」シリーズは現在5までリリース。\n2021年1月スウェーデンのレゲエシンガーDan I Locksをfeatしたシングル「Don't call feat. Dan I Locks」をリリース。\n同年3月ベースミュージックにフォーカスしたアメリカノースカロライナ州のレーベルBoom One Records よりシングル「Howlin'」feat.KUDAN JUZO &Ayaca Saitoをリリース。\n同年7月メキシコのDUBレーベルGREEN BEATSのコンピレーションアルバムに参加。\n\nまた中米コスタリカのラジオHOT78で自身の番組「Hummingbird The Dub Show」隔週で放送している。"},{"title":"NSS","url":"https:\/\/tubm.tokyo\/artist\/nss\/","text":"NSS\n\nListen on Spotify\nListen on Apple Music\n\nReleases:\nTAX\n\nNSSは、国籍、性別全てが謎に包まれたプロデューサーです。\n例のアメリカのあのラッパーだとか某政治家の隠し子だとか色々な噂がありすぎて謎なプロデューサーですが、とりあえず病んでるサウンドデザインとMIXに関してはハンパないSick Producerです。\n色々ヤバイです。                                                                                 "},{"title":"Manish-T","url":"https:\/\/tubm.tokyo\/artist\/manish-t\/","text":"Manish-T\n\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nFacebook\nListen on Soundcloud\n\nReleases:\nFollow Wi Now\n\n独自の空気感を操りながらもオリジナルなフロウとコンシャスな歌詞を武器として聴き手に強力なインパクトを与える完全なる実力派Deejay。\n【GLOBALiST PRODUCTION】のレーベルオーナーとしての顔も持ち、Vinylレコードの海外先行リリースやディジタル配信などにて、アーティストも国内外問わず数々の作品をプロデュース。\n\nまた、Sound Crew【INTER-NATIONAL SOUND “The Mighty Influential Warriors”】に所属。\n2003年より本格的にステージに立ち、着うた配信やMix CDへの参加などを経て、2008年にUKロンドンにて初の海外ステージ、2010年よりUKへ戻り長期滞在。\n現地にてDigital Dancehall、Steppas、Dubwise、Dub step, Drum&Bass、Grime musicなどのBass musicのシーンをダイレクトに学ぶ。帰国後、同年よりBrother Cultureの初来日Japan Tourを始め、Macka B、Carl Meeks、Naram fr.JAHTARI、The Bush Chemists、Firehouse、Speng Bond、Don Camilo、S’Kayaなど数々の来日アーティストとのセッションを開催。\n\nまた、OBF & Shanti D、Sr.Wilson、Ranking Joe、Origin One、Buttersなどの数々の外来アーティストJapan Tourへの参加。海外と日本を繋ぐ数少ない架け橋的存在として、世界水準クオリティを常に強く意識。まさに、“百聞は一見にしかず”。             "},{"title":"Viral","url":"https:\/\/tubm.tokyo\/artist\/viral\/","text":"Viral\n\nListen on Spotify\nListen on Apple Music\n\nReleases:\nChill Intense 2020ish (Instrumental)                                                                                          "},{"title":"TAMA ANT","url":"https:\/\/tubm.tokyo\/artist\/tama-ant\/","text":"TAMA ANT\n\nListen on Spotify\nListen on Apple Music\nInstagram\n\nReleases:\nTAX \n\n神奈川県川崎市出身。\n2006年よりマイクを握りしめ活動を開始。\n同年、同じ川崎地区で活動をしていたJACK POT SOUNDと共に行動し「JACK POT CREW」に加入。\n2019年にRAGGA-G、バネマン、RUN BIRD、T -MANとDEEJAYの5人組集団「ポンコツインク」を結成。\nBURRO BANTONに憧れ、現場ではダミ声スタイルで盛り上げる生粋のREGGAE DEE JAY\n\n映像制作会社 BELL WOOD & Co の代表も務めており、TUBMのMusic Videoの幾つかは彼が撮影、編集したものです。"},{"title":"TheInvaezn","url":"https:\/\/tubm.tokyo\/artist\/theinvaezn\/","text":"TheInvaezn\n\nListen on Spotify\nListen on Apple Music\n\nReleases: Chill Intense 2020ish (Instrumental)                                                                                          "},{"title":"T-MAN","url":"https:\/\/tubm.tokyo\/artist\/t-man\/","text":"T-MAN\n\nListen on Spotify\nListen on Apple Music\nInstagram\nTwitter\n\nReleases:\nジャメイカの音楽で\n\nJapanese Reggae Artist\n1984年産まれ兵庫県西脇市出身。\n様々なLiveトーナメントでの優勝経験をもち、2018年2月18日にリリースしたSingle「くりかえし」がREGGAE ZION初登場週間総合ランキングで１位を獲得。同年12月15日にリリースしたSingle「もちかた」がiTunesレゲエチャート、REGGAE ZION共に1位を獲得。\nストレートなLyricに独特のFlowで現場を魅了し、聴く人を不思議とポジティブな気持ちにさせる歌い手。Reggaeのみならず様々な音楽シーンでその魅力を発揮する注目のArtistの1人である。"},{"title":"Blog Category - Mixing&Mastering","url":"https:\/\/tubm.tokyo\/category\/mixingmastering\/","text":"Mixing&Masteringに関するブログのリスト:\n\n・かなり使えるVSTシンセのプリセットを無料でGetしよう！    全部無料だぜ！ 今回は全作曲家向けの便利ブログです。初心者からプロまで、かなり使える無料プリセットをGetできるサイトを紹介します。プリセットを参考に新しい音を作るもよし、プリセットをそのまま使っても…\n\n・Ableton Live ver.11に対応するOptions.txtの設定リスト（全網羅）    Liveを使い易くカスタマイズしよう！ 今回は表題の通りAbleton LIve 11のOption.txtで設定できる機能全てのリストです。これからLiveを使おうと思ってる人も既にヘビーユーザーの…\n\n・（Apple Logic／Ableton Live編）AUX／GroupトラックもFreezeできる裏技    https:\/\/www.meldaproduction.com\/MChannelMatrix 最近はコンピューターの性能も大分上がってきて全てネイティブでミックスする人も多いかと思います。 それでもS…\n\n・実は繊細なMIX時にも使えるプラグイン「Rift Filter Lite」    凄い使えるプラグインあったので紹介したいなぁと思って勝手に紹介したいと思います。 ちょっと前まで無料だったんですが、今は29ドルとかで売られてますね。 https:\/\/www.minimal.audi…\n\n・スペクトラムアナライザ見ればノート（音程）は分かる    https:\/\/www.fabfilter.com\/products\/pro-q-3-equalizer-plug-in https:\/\/splice.com\/plugins\/1022-span-vs…\n\n・音階と周波数    下にスクロールするとそれぞれの音程を周波数で表したチャートがあります。自分の楽器の音域、声の声域を認識できるし、ミキシングエンジニアとしてもミックスする際に使う場面も（稀に）あります。 これを見ればス…\n\n・コンプレッサーはEQの前？後ろ？    楽曲をミックスしてる時、EQはコンプの前？後ろ？って気になった事ありませんか？自分は気になった事ありました。 ミックスを教えている生徒さんやミックスを依頼されたお客様からも何度か聞かれた事もあります。…\n\n・Loudness Normalizationとは???    エンジニアやってるとクライアント様から『SpotifyやYouTube向けのマスタリングは可能ですか？』と言った質問を頂く事があります。 興味深いのでブログ記事にする事にしました。 結論から言えば可能…"},{"title":"Blog Category - Web3","url":"https:\/\/tubm.tokyo\/category\/web3\/","text":"Web3に関するブログのリスト:\n\n・本当に誰でも買える！音楽NFTの買い方（その２ – JPYCを購入する）    JPYCを購入する 前のブログではウォレット（MetaMask）のセットアップ方法とPolygonネットワークの追加について書きました。 https:\/\/tubm.tokyo\/web3\/how2buy…\n\n・本当に誰でも買える！音楽NFTの買い方（その１ – ウォレットのセットアップ）    NFTを買う為のウォレットをセットアップ TUBMでは2023年から音楽NFTの販売を始めます！それに伴い今回は本当に誰でも購入できる様に凄くシンプルなNFTの買い方を説明したいと思います。専門用語も…\n\n・[NFT] – Samurai Switch    更新日: 2023年2月8日 RouteNoteへの登録がイマイチ難しいという声があったため収益の分配方法を単純化しました！このSamurai SwitchのNFTを保持しているウォレットに毎月MAT…\n\n・KillA808 – da lofi sh!tがEmanateのプレイリストに乗りました ^^    またまた大変ありがたい事に、今イチオシの音楽プラットフォーム「Emanate」のオフィシャルのプレイリスト「Highlights of the week | June Week 1」にKillA808…\n\n・KillA808 – ilLegalがEmanateのプレイリストに乗りました ^^    大変ありがたい事に、今イチオシの音楽プラットフォーム「Emanate」のオフィシャルのプレイリスト「Highlight of the week Feb 1」にKillA808のビートが選ばれましたので…                                                                                          "},{"title":"Blog Category - 実績","url":"https:\/\/tubm.tokyo\/category\/pickout\/","text":"TUBMの実績のリスト:\n\n・ヒップホップチャート３４位！    iTunesヒップホップチャートでもチャートインする様になってきました！嬉しいですね ^^ この曲はヒップホップと言えるか怪しい感じではあるのですが、まぁチャートにインしちゃえば細かいことはどうでも良…\n\n・DUBBLE UPがiTunesレゲエチャートで１位！    発売された今日いきなり１位！ TUBMでは2021年の時にレゲエチャートで１位取って以来ですね！素晴らしい！Humming君のプロダクションもパズ君のリリックもカッコいいしfeatで入ってるキムライオ…\n\n・KillA808 – da lofi sh!tがEmanateのプレイリストに乗りました ^^    またまた大変ありがたい事に、今イチオシの音楽プラットフォーム「Emanate」のオフィシャルのプレイリスト「Highlights of the week | June Week 1」にKillA808…\n\n・KillA808 – ilLegalがEmanateのプレイリストに乗りました ^^    大変ありがたい事に、今イチオシの音楽プラットフォーム「Emanate」のオフィシャルのプレイリスト「Highlight of the week Feb 1」にKillA808のビートが選ばれましたので…\n\n・新曲がiTunesのレゲエチャート１位を獲得しました！    RAGGA-G & PAZOODOG - SOUNDTRIP（Prod. KillA808 & Hayatobeatz）って曲です！現在（2021年10月20日）１位にいます！ TUB…\n\n・PAZOODOG – Night on Earthが「MUSIC TANK セレクション」チャンネルでも配信されます！    株式会社U-NEXT MUSIC TANK運用チーム様よりメッセージを頂き、「MUSIC TANK セレクション」のチャンネルで配信される事になりました！ 〜〜〜以下転送文〜〜〜〜〜 配信開始日：9月…\n\n・Gash & Neo Nao – Chakuchiを紹介して頂きました！    インスタの@japanese_rap_lyricさんのページで紹介して頂きました！大変有難いです m(_ _ )m 是非@japanese_rap_lyricさんのページ覗いてみてください、色々なラッ…                                                                                          "},{"title":"[NFT] - Samurai Switch","url":"https:\/\/tubm.tokyo\/tubm-nfts\/samurai-switch\/","text":"[NFT] – Samurai Switch         更新日: 2023年2月8日\n\nRouteNoteへの登録がイマイチ難しいという声があったため収益の分配方法を単純化しました！\nこのSamurai SwitchのNFTを保持しているウォレットに毎月MATICまたはJPYCで収益を送ります！\n既にRouteNoteに登録している方はRouteNote・PayPalを通して支払われますので、特にアクションは不要です。\nRouteNoteへの登録がまだの方もウォレットに送金しますので、特にアクションは不要です。\n最初の分配は2023年4月15日~20日の予定となっています。\n\nTUBM初のNFT販売です！\n\nこのNFTはTokyo Underground Beatz Massiveよりリリースされる以下の楽曲に適用されます。\n\n楽曲名: Samurai Switch\nアーティスト: RAGGA-G and PAZOODOG\nプロデューサー: KillA808\n配信開始日: 30th Jan 2023\n\n購入について:\n＊このNFTは完売しました。TUBMからのこれ以上の販売はありませんが、もしかしたら誰かが転売する可能性はあります。気になる方はOpenSeaのコレクションをチェックしてみて下さい。\n\n収益の受取:\n収益の分配方法を単純化しました。このSamurai SwitchのNFTを保持しているウォレットに毎月MATICまたはJPYCで収益を送ります。\n\nリリース情報:\n2023年1月30日足立区から発信する新型Hip-Hop Tune！🔥🔥🔥\n \niTunesレゲエチャートの常連RAGGA-GとTUBMのAceラッパーPAZOODOGのコラボです！2021年にも１位取った二人です！😎\nProducerは最近ジャンルがHip-Hopなのか怪しくなってるKillA808でお届けします！🤪\n \n2023で１番Hip-HopじゃないHip-Hop目指してます！\nTUBMは基本足立区推しなので足立区系ヒップホップというジャンルを（勝手に）作りました！😎😎😎\n \n1月30日のリリース日まではEmanate独占でフル尺で配信中ですので是非リリースページ（https:\/\/tubm.tokyo\/release\/samurai-switch\/）を見て下さい<(_ _)>\n\n注意点:\nNFTの再販は勿論可能ですがNFTがウォレットから無くなった時点で上記に記載された権利は失ったものとなります。\n匿名での申請可能です。私達が得る情報は以下の通りです。\n1. 申請者のEメールアドレス（必要事項の連絡のみに使います）\n2. 申請者のウォレットアドレス\n楽曲やアートワークを含む全ての著作権はオリジナルコンテンツクリエイター、つまり私達レーベルに帰属します。このNFTによって得られる権利は収益の一部（トークン毎に10%）を得られる権利です。\n収益は月締めの４５日後に発生します。例えば２月に発生した収益は４月中旬（大体１５日前後）に獲得できます。"},{"title":"本当に誰でも買える！音楽NFTの買い方（その２ - JPYCを購入する）","url":"https:\/\/tubm.tokyo\/web3\/how2buy-jpyc\/","text":"本当に誰でも買える！音楽NFTの買い方（その２ – JPYCを購入する）\nJPYCを購入する\n\n前のブログではウォレット（MetaMask）のセットアップ方法とPolygonネットワークの追加について書きました。\n\n前のブログ:\n本当に誰でも買える！音楽NFTの買い方（その１ - ウォレットのセットアップ）\nNFTを買う為のウォレットをセットアップ TUBMでは2023年から音楽NFTの販売を始めます！それに伴い今回は本当に誰でも購入できる様に凄くシンプルなNFTの買い方を説明したいと思います。… 続きを読む\n\n今回はおそらく日本で最もシンプルに買える仮想通貨、JPYCの購入方法を紹介します。今回も全てスマホで完結する方法です。\n\nJPYCは日本円ステーブルコインで、「1JPYC＝1円」で取引できるデジタルコインです。多少の変動はありますが日本円と最も価値が近く簡単に購入できるので仮想通貨初心者の方はJPYCの購入をお勧めします。\n\n勿論Polygonネットワークでの購入可能です。購入後はMetaMask等の仮想通貨ウォレットのSwap機能を使って簡単に基本通貨（Polygonの場合はMATIC）に変える事ができます。\n\nMetaMaskのブラウザを立ち上げる\n前回のブログでインストール・設定したMetaMaskのアプリを立ち上げブラウザを立ち上げます。\n\n\nMetaMaskを立ち上げるとスクショの画面の様にアカウント名・ネットワーク名・資産名のリストが出てくると思います。ここで画面左上のハンバーガーメニューをタップします。\n\nメニューを開くと「ブラウザ」が出てきますので、「ブラウザ」をタップします。\n\nJPYC.JPにアクセスする\nブラウザを開けば後はSafariやChrome等と同じです。まずはJPYC.JPにアクセスしましょう。\n\nPYC.JP:\nJPYC | エンをつなげる日本円ステーブルコイン\n日本初の一般向け前払式支払手段扱いのステーブルコイン（ERC20）です。1JPYC = 1円で物品購入が可能です。\n\nこの様な画面が出ていると思いますので、画面右上にある「JPYCを購入する」をタップして進みましょう。\n\n購入方法を選択\n入金方法は銀行振込を選択しました（既に暗号資産の購入ができる人はこのブログを読む意味は無いかと思います）。画面左下の「ウォレットに接続」をタップしてウォレットと接続してください。\n\n＊ウォレットに接続する際はネットワークがPolygonになっているか確認してください。\n\nウォレットとAPP.JPYC.JPの接続の承認のメッセージが出てくるので青い「接続」ボタンをタップします。\n\n振込金額とネットワークを選択する\n金額とネットワークを選択します。\n\n＊ネットワークがPolygonになっているか確認してください。間違えると別なネットワークで入金されてしまい、Polygonネットワークで買物できなくなります（TUBMのNFTは全てPolygonネットワークです）。\n\n購入金額（1JPYC = 1円) を入力し、ネットワークはPolygonを選択します。\n\n＊金額に上限は無い様ですが、ある一定の金額を超える入金の場合には身分証明が必要な様です。\n\n画面確認をして終了\n最後に画面確認をします。\n\n支払い方法が銀行振込になっているのを確認してください。\nネットワークがPolygonになっているのを確認してください。\nウォレットのアドレスが自分のモノで間違い無いかを確認してください。\n上記の確認ができましたら「上記に同意する」にチェックを入れて画面確認へ進みます。\n\n振込をして待つ\n入力が完了すると後はJPYC.JPからメールで来る振込案内を待ち、振り込んで終了です。\n自分の場合は全て20分以内に完了しました。ある一定の金額を超えると身分証明が必要になり少し時間かかる様ですね。\n\n受け取ったJPYCをMetaMaskで確認する\nMetaMaskにはJPYCはデフォルトでは表示されません。なので入金されたJPYCをMetaMaskで見る場合は以下の手順でトークンをMetaMaskに追加します。\n\nMetaMaskを開くと画面下のトークンをインポートというリンクがあるので、それをタップ。\n「検索」と「カスタムトークン」の二つのタブが表示されるので「カスタムトークン」を選択する。\n\nトークンアドレスに以下のトークンアドレスを入力します。\n\n0x431D5dfF03120AFA4bDf332c61A6e1766eF37BDB\n\n基本はこれだけでシンボル等も反映されてJPYCがMetaMaskに表示される様になります。\n\nJPYCがウォレットに表示されている事を確認します。"},{"title":"Ableton Live ver.11に対応するOptions.txtの設定リスト（全網羅）","url":"https:\/\/tubm.tokyo\/mixingmastering\/options-txt-list\/","text":"Ableton Live ver.11に対応するOptions.txtの設定リスト（全網羅）\nLiveを使い易くカスタマイズしよう！\n\n今回は表題の通りAbleton LIve 11のOption.txtで設定できる機能全てのリストです。\nこれからLiveを使おうと思ってる人も既にヘビーユーザーの方も是非見て下さい！より快適なDTM生活が送れる可能性アリです！\n\nOptions.txtについて\nOptions.txtって何？て方へ説明すると、Liveで実験的なサポート対象外の機能を追加する事ができるテキストファイルです。\n例えばよく使われるラインの一つ（自分も使ってます）が、\n\n-ShowDeviceSlots=1\n\nです。\n\nテキストエディタを使って、プレーンテキスト形式のファイルを新規作成し、ファイル名を“Options.txt”にします。そのファイル内に上記を記載します。\n\n作成したファイルを次の場所にあるフォルダ“Preferences”に移動します（次のパスの“x.x.x”には、現在使っているLiveのバージョン番号が入ります。例：“11.1”）。\n\nWindows\n\n\\Users\\[username]\\AppData\\Roaming\\Ableton\\Live x.x.x\\Preferences\\\n\nmacOS\n\n\/Users\/[username]\/Library\/Preferences\/Ableton\/Live x.x.x\/\n\n上記の場所に作成したテキストファイルを置いてLiveを起動するとセッションビューで現在どのトラックにどのエフェクトが挿してあって、どれをオン・オフにしているかと言うのが一発でわかる様になります。\n\n全リストの入手先と調べた方法\n他の機能も気になっていたので、リストをGithubからGetしてきました。\n\nただしこれには機能と値の設定が説明されていないので機能と値の設定を調べるべくChatGPTで質問してみました（全部を自力で検索するのは正直無理っす）。その結果をリストに纏めました。\n\n＊注）ざっと見た感じ間違ってはいない様な気もしますが何せ量が多いので、、初めて見るラインもあり、またAIも不完全である為、100%を保証するものではありません。実際に使う場合には必ずご自身で値の設定等を確認し、自己責任において使用して下さい（サポート対象外の機能です）。\nまた、もしリスト内に間違いを発見した場合はコメント欄やコンタクトフォームから教えていただければ幸いです。\n\n全部で102あります。使えそうなものは使ってみて下さい！それでは快適なDTM生活を！"},{"title":"Loudness Normalizationとは???","url":"https:\/\/tubm.tokyo\/mixingmastering\/463\/","text":"Loudness Normalizationとは???\n\nエンジニアやってるとクライアント様から『SpotifyやYouTube向けのマスタリングは可能ですか？』と言った質問を頂く事があります。 興味深いのでブログ記事にする事にしました。\n\n結論から言えば可能です（需要が多いならサービスとして売ろうかと思ってます、お気軽にご連絡ください）。 可能ですが幾つか考えて欲しい点もあります。\n\nそもそもストリーミング配信に最適化されたマスタリングとは？:\n本題に入る前にストリーミング配信に最適化とはどう言う意味かを簡単に説明します。\nエンジニアの仕事に造詣の深くないアーティスト／ミュージシャンやビートメーカー等の方々にも理解していただきたい為、専門用語は避けてザックリ説明すると現在の音楽ストリーミングサービス、SpotifyやApple Music、YouTube等はラウドネスノーマライゼーションと言って聴感上の音量感を一定にする為LUFSと言う単位を使ってラウドネスの値をそれぞれの基準に揃えています。\n一部Spotifyでは別な規格を用いていますが、それでも将来的には同じ方向に進むとアナウンスされています。\n\nラウドネスノーマライゼーション（自動音量調整）:\n自動音量調整は一視聴者にとって良い事です。\nCDやMP3プレーヤーなどで音楽を聴く時に経験された方も多いと思いますが『静かめのスタンダードジャズを聴いていて、次のハードロックになったら爆音だった』等経験者も多いかと思います。\nこの二つのジャンルを同じ音圧で調整する事は無い為、当たり前の事なんですが普通にリスニングを楽しみたい人から見ればいちいちボリューム調整をする必要が無くなる為ノーマライズ（音量感の均一化）してくれるのは楽ですよね。\n\n音圧競争の終わり？:\nこれにより音圧競争に終止符を打つ日がいずれ来ると予想されます。これも簡単に説明すると音圧を詰め込まなくても同じ音量感にノーマライズされる為よりダイナミックレンジが広く聴いていて疲れない様にマスタリングした方が良い時代になってきたと言う事です。\n例えばYouTubeでは -14LUFS(int)と言う値にノーマライズされますが、それを波形で説明するとこうなります。\n\n波形を見ると分かりやすい:\n波形１- これは俗に言う『音圧高め』の曲の波形です。\n\n波形２- これをYouTubeにアップロードして再生すると再生時にノーマライズされ、この様に再生されます。単純にボリュームが落とされた感じですね。\n\n波形３- どうせボリュームが落とされるのであれば、この方が良いじゃないかと。波形２も波形３も同じく-14LUFSのラウドネス値になりますが波形だけ見ても波形３の方がダイナミックレンジが広く、より呼吸できる感じがしますよね？\n\n実際に聴いても同じ音量感ですが波形３の方が長時間聴いても疲れない筈です。\n\nストリーミング配信用にマスタリングを依頼する前に考えて欲しい事:\nさて本題ですが。\n良い事尽くめに見えるこのノーマライズですが、まだまだ完璧ではありません。むしろ完璧からは程遠いです。\n\nまず一番の問題として各プラットフォームの規格が統一してない事です。これに関しては割とマジで\n規格統一してからやれや (ﾟДﾟ)ｺﾞﾙｧ!\n…..\nって思っちゃいましたね。\n\nSpotifyやらApple Musicはノーマライズの入切を自分で設定出来ちゃう上にブラウザーで聴いた時とアプリで聴いた時でも入切が変わってしまうという仕様の統一の無さ、、。\nこれで想像できる人はできると思いますが、重要な人に自分の楽曲を聴かせる為のプラットフォームとしてはキチンと出来上がっていないと言えます。\n人の耳は音圧が高いモノをより良い音と認識（勘違い）してしまいがちなんです（特にラウドネスに関して詳しくない人は）。\n\n結論として:\nそこで自分はこの依頼・質問が来た時には大体の場合この様に答えます。\n『貴方の好きな音圧でマスタリングすべきです。』\nもっと正確に言えば『貴方がターゲットとする音圧でマスタリングすべきです。』\n\n正直CDはともかくダウンロード販売の需要が消える事は無いと思いますし（少なくとも現状では）。\n-14LUFSとかFxxkだぜ、って思う人も多いかと思います。\nしかし仮に貴方の客層がストリーミングメインで、Spotifyを聴いてくれる人が多いとか客層をすでに把握している場合はそのプラットフォームに合わせたマスタリングをしても良いのかな、とは思います。\n\n最後に:\nごちゃごちゃ色々書いちゃいましたが、ぶっちゃけると自分が曲作って配信する場合はノリノリで音圧決めて「歪んでなきゃいいや」位の軽い感じでやっております。世の中そんなもんです。\n\nいや、流石に仕事でご依頼頂いた場合は丁寧に説明した上でラウドネス値など決めてますよ。"},{"title":"ヒップホップチャート３４位！","url":"https:\/\/tubm.tokyo\/pickout\/chartedin-itunes-hiphop-chart\/","text":"ヒップホップチャート３４位！\n\niTunesヒップホップチャートでもチャートインする様になってきました！嬉しいですね ^^   この曲はヒップホップと言えるか怪しい感じではあるのですが、まぁチャートにインしちゃえば細かいことはどうでも良いか、って感じではあります。   こちら（https:\/\/tubm.tokyo\/release\/samurai-switch\/）に曲のリンク集あるのでよろしければ是非！"},{"title":"新曲がiTunesのレゲエチャート１位を獲得しました！","url":"https:\/\/tubm.tokyo\/pickout\/433\/","text":"新曲がiTunesのレゲエチャート１位を獲得しました！\n\nRAGGA-G & PAZOODOG – SOUNDTRIP（Prod. KillA808 & Hayatobeatz）って曲です！現在（2021年10月20日）１位にいます！  TUBM初のiTunesチャート入りで感動です！やはりラガさんの力が大きいなと思います！ DLしてくれた方々には感謝しかありません m(_ _ )m\n\n曲情報は こちら（https:\/\/tubm.tokyo\/release\/soundtrip\/）です。"},{"title":"かなり使えるVSTシンセのプリセットを無料でGetしよう！","url":"https:\/\/tubm.tokyo\/mixingmastering\/freepreset\/","text":"かなり使えるVSTシンセのプリセットを無料でGetしよう！\n全部無料だぜ！\n\n今回は全作曲家向けの便利ブログです。初心者からプロまで、かなり使える無料プリセットをGetできるサイトを紹介します。プリセットを参考に新しい音を作るもよし、プリセットをそのまま使っても問題なく商用利用までできちゃいます。\n\nサイト紹介   まずここにアクセスします。https:\/\/presetshare.com\/     PresetShare Synth presets exchange platform and music community  presetshare.com   このサイトは、サウンドデザイナーや作曲家・プロデューサーが自分で作ったプリセットをシェアするサイトです。このサイトを通じて、世界中のクリエイターたちが作成した様々なVSTシンセのプリセットをダウンロードしたり、自分自身が作成したプリセットをアップロードして共有することができます。   このサイトにアップされたプリセットは基本的にパブリックドメイン（知的財産権が発生していない状態または消滅した状態のことをいう）なので、ダウンロードした物は自由に利用できます。逆に自分自身が作成したプリセットをアップロードした場合もパブリックドメインになります。   シンセも非常に多彩で例えばですが自分が使っている、FM8、Massive X、Serum、Pigments、Spire、Surge、Sylenth1、Vital、Zebra、辺りはカバーしてます。他にも多くのシンセのプリセットがアップされています。   サイトの使い方   日本語は無いのですが非常にシンプルなので、スクショと併せて簡単に使い方を書きます。おそらく誰でも簡単に使えるサイトです。 まずアクセスすると以下のスクショの様な画面が出てきます。     スクショのピンク丸の部分からサイトに登録します。Googleアカウントで登録すると簡単です。その他Emailでの登録も可能です。   Googleアカウントで登録すると直後にログインした状態になり、すぐサイトが使える様になります。     ログインすると上のスクショの様な画面が出てきます。緑の丸の部分「Get Presets」をクリックします。   検索画面   「Get Presets」をクリックすると下のスクショの画面が出てきます。     この画面でシンセ（スクショの水色丸）、ジャンル（スクショの黄色丸）、サウンドタイプ・楽器（スクショのオレンジ丸）を選択します。 例えば、FM8のセンセで、ジャンルはBass House、サウンドタイプはBass、といった感じで欲しいプリセットを絞っていきます。   他にもかなり絞れるのですが、絞り過ぎると検索に引っ掛かって来なくなります。   再生ボタンを押すとプリセットの音を確認できます。そして気に入った音があればダウンロードします。   Enjoy!!!   コミュニティもあり、クリエイターとコミュニケーションを取ってサウンドデザインや楽曲について話したり意見交換できたりもします。今の時代、ChatGPT等を使えば（完璧とは言えないですが）結構良い精度で翻訳もできるので、好きな人はどんどんコミュニティに参加しましょう！   それでは快適なDTMライフを！"},{"title":"完全無料でSpotifyやAppleに音楽を配信する方法！","url":"https:\/\/tubm.tokyo\/music-monetize\/free-distro\/","text":"完全無料でSpotifyやAppleに音楽を配信する方法！\n\n音楽もWeb3に段々と移行してるなぁと感じてはいますが、現状ではやはり一番音楽が聴かれてるプラットフォームはYouTube、Spotify、Apple、Amazon、AWA、あとはSoundCloud等でしょうか。Line Music利用者も多いですね。\n今回は自分の曲をSpotifyに上げてみたいけどお金かかるのかな？とか思っている人に朗報です。今は本当に誰でも音楽を配信できる時代です。しかも無料でできちゃいます。\n私事ですが自分もジャンルによって名義使い分けて音楽配信するのが結構好きな為こういう情報はいつもアンテナ張ってます。完全無料でリリース出来れば経費節約になりますしね〜。\nって訳で今回はオススメの無料アグリゲーター４選を紹介したいと思います！\n\nアグリゲーターとはザックリ言えばSpotifyやApple等のDSPに楽曲をアップしてくれる人達の事です。ディストリビューターとかDistroと呼ぶ人もいます。基本的には同じ意味ですがアグリゲーターはよりデジタルコンテンツにフォーカスしてる感じだと思います。\n\nあくまで自分的にですが信頼性やサポートの対応、利便性または柔軟性を考えた順位です。独断と偏見も入ってると思います <(_ _)>\n\n１位 –  Amuse Music     Independent Record Label & Music Distribution | amuse amuse is an independent record label and music distributor. We've launched the careers of some of the world's top independent artists and you could be next!  www.amuse.io\n実は、、、自分では使った事ないんですよ爆 しかし何故１位にしたかと言うとですね、、完全無料で配信できるのに、、な、なんと100%の収益が入ってくるんです！100%ですよ？どうやってこの会社収益出すの？って一瞬思いましたが、まぁしかし無料プランだと機能的な制限はあるので勿論有料プランもやってます。\n良いところ       無料なのに100%の収益バック！   日本語は無いがGUIが直感的、シンプルで見やすい   無料なのに結構色々なDSPに配信してくれる（ こちら から配信先を確認できます）   RedditやTrustpilot、その他のレビューサイトでの信頼性は高い\nダメダメPoint       YouTube Content ID, FB\/Insta, TikTok 音楽ライブラリへの申請が不可（コレが自分が使わない理由です）   ロイヤリティースプリットの手数料が15%   リリースまで４週間かかる   １アーティストまたはバンドのアカウントのみの為コラボ作品等は無料プランでは配信できない   （口コミによれば）無料プランの場合のサポートの対応が遅い   日本語のサポートは無い\nこういう人向け       特にコラボはせずに１アーティスト・バンドとして配信していきたい   YouTube Content IDは不要で、FB\/Insta、TikTokのライブラリにも興味ない   配信は事前に準備して４週間前にはキッチリ準備しておくタイプだ\n\n２位 –   Routenote     RouteNote: Digital Music Distribution Unsigned Musicians and Labels: Free Digital Music Distribution and sell your music worldwide on iTunes, Spotify, YouTube and more.  www.routenote.com   ここ２位にしてますが自分的にはイチオシです！ 無料プランは85%の収益バックです。15%はRoutenoteの収益となります。15%持ってかれて全然良いよって位サービスは充実してます。SoundCloudのマネタイズも可能です。私もここから幾つかリリースしてるので信頼性の高さは非常に良いと思います。無料プランでもサポートは大体２４時間以内には返信くれますね。日本語サポート無いのとリリースまで２週間かかるのが少しだけアレですが無料なら全然文句言えません。   もしRoutenoteにアカウント作成する方で、この記事が役に立った思ってくれた方が居ましたら是非私の紹介コードを使ってください: 2f90e4dc 本当に少額ですがRoutenoteから私にご褒美がもらえます m(_ _)m\n良いところ 無料で85%の収益バックは結構良い！ 複数のアーティストでも配信可能な為レーベルマネージメントとしてのアカウントとしても使える 複数の名義を持つ作家さんやアーティストも使いやすい 多数のDSPは勿論の事YouTube Content IDやFB\/Insta, TikTok, さらにはSoundCloudのマネタイズも可能 無料プランでリリースしててもサポートの対応は◎ ロイヤリティースプリットも勿論無料 フォロワー数が多いプレイリストを幾つか持っていて楽曲をプレイリストにピッチインできる\nダメダメPoint 特に無し 強いて言うなら日本語UIあればやはりより多くの人が使えると思う プロモツールがより充実してれば言う事ないっす あとは支払を仮想通貨でしてくれればホント最高（現状基本はPayPalです）\nこういう人向け 無料でできるだけ多くのDSPに届けたい YouTube Content IDは絶対必要 レーベルの様に複数のアーティストのリリースを管理している 勿論単体のアーティストにも向いている コラボもガンガン参加したい\n\n３位 –   BIG UP!     BIG UP! クリエーター\/アーティストのためのマルチマネタイズプラットフォーム。音楽配信代行,音楽出版,CD・グッズの製造・販売,音楽制作のサポート,販売状況を詳細に見られるレポートやアーティストページ,あなたのクリエイティブをサポートいたします。  big-up.style   日本のエイベックス・エンタテインメント株式会社のサービスみたいすね。有名だと思うので皆さん知ってるかと思いますが、BIG UP!さんは無料プランもやってます。 著作権登録とかの機能も付いてて「パブリッシャーって何？」って人でも著作権管理までできちゃう便利なサイトです。 他にもやはり日本の会社なので日本国内のオーディション情報が掲載されていたり、CD\/DVD制作・販売のサービス、オンデマンドグッズサービスもやってるみたいです。 そして何より日本国内独自のストア、dヒッツとか楽天にツタヤ、特にLine Musicに配信できるのは嬉しいですね。\n良いところ 複数のアーティストを登録可能（レーベルや複数の名義を持つ人も使える） グローバルな主要DSPはカバーしている。日本のストアの種類も豊富。 YouTube Content ID、FB\/InstaやTikTok可 やはり日本語のサポートは親切対応◎ 個人的にオンデマンドグッズサービスが気になっている 日本のオーディション情報が掲載されていて参加も簡単 Spotifyのプレイリストがあり良い曲は掲載してくれる\nダメダメPoint       無料だけど手数料がやや高い（還元率ストリーミングは70%、ダウンロードは50%）   世界の細かいDSPまではカバーしていない   ストリーミング収益が高いTidalやNapsterがカバーされていない   あとやっぱりちょっと手数料が高い\nこういう人向け とりあえず国内の音楽市場を狙ってる サポート受けるなら絶対日本語！ 無料でできるだけ多くのDSPに届けたい、特に日本は重要 オーディションあればガンガン参加したい グッズも売りたい\n\n４位 –   trac     trac.co At Trac, we empower artists with the tools needed to have a sustainable independent career.  app.trac.co   ここはアレですね、、、怪しさと斬新さが入り混じった何とも言えないDistroですね、、。特徴としては素晴らしいんで一応ランキングに入れました。自分的な利点は仮想通貨でペイアウトをもらえる事、そしてNFTをカタログに入れられると言う、無料のアグリゲーターとしては唯一だと思います。   ただ、ちょっとこの前人柱になってみようと思って１曲昔作ったどうでも良い音源をアップしようとしたのですが、、、アップロード時にWeb上のバグだと思いますが配信ストアが選べなくて配信出来なかったと言う経緯があります。 さらにはカタログ中にNFTのセクションがあるのですが特にNFTをコネクトする様なDAppも搭載されていない普通のWeb2のサイトに見えましたが、、、 もしかしたらまだ開発中なのかもしれないですね、比較的若いドメインの様ですし。 機能が全て普通に使えていれば私の意見も変わっていたかもしれません。   もしtracを使う事がありましたら自己責任でお願い致します <(_ _)> 自分も使えてないのでハッキリと信頼できるサイトとは言えません。Web上の口コミでも賛否両論があり判別しづらいです。\n良いところ 複数のアーティストを登録可能（レーベルや複数の名義を持つ人も使える） 無料でも100%の収益バック 何と言ってもクリプトでのペイアウトが嬉しい NFTを掲載できるっぽい？（もしかしたら無料プランでは不可なのかもしれません。）\nダメダメPoint YouTube Content ID、FB\/InstaやTikTok不可 リリースまで４週間 ペイアウトが四半期毎 サイト上のバグ等があったりサイトが少し遅かったり ウォレットもDeFiじゃないのが気になった（やはり唯のWeb2サイトに見える） 悪い方の口コミでは「有料プラン支払った途端にアカウント凍結された」と言った怖い口コミもあった 日本語不可   こういう人向け オレ／私、人柱になってきます！ Web3（ブロックチェーン技術を活用した分散型Webの総称）に最低限の理解がある お金よりクリプトもらえる方が安心する 音楽NFTも始めてみたい、または既にやってるぜ！                                                                         "},{"title":"（Apple Logic／Ableton Live編）AUX／GroupトラックもFreezeできる裏技","url":"https:\/\/tubm.tokyo\/mixingmastering\/freeze-aux\/","text":"（Apple Logic／Ableton Live編）AUX／GroupトラックもFreezeできる裏技\n\nこの記事に出てくるプラグイン     MChannelMatrix Mix and reroute the channels from both inputs.  www.meldaproduction.com\n\n最近はコンピューターの性能も大分上がってきて全てネイティブでミックスする人も多いかと思います。\nそれでもSubgroup Mixing（サブミックス）やってる時にCPU\/RAMが足りないなぁ、って場合に使える裏技を紹介します。\nAudioトラックやInstトラックはフリーズできるのに、AUX／Groupトラックはフリーズできないんですよね、、\nこれがフリーズできたら便利だな、と思い色々検索してたらできました ^^\n\n今回はApple LogicとAbleton Live編です。\nProtoolsは元々AUXトラックをフリーズする機能があるので不要かと思いますが、それ以外のDAWでも応用できると思います（未検証）。\n\n\n必要なプラグイン\n用意するのはMChannelMatrixという無料プラグインのみです。\nかなり便利なユーティリティプラグインで、自由なルーティングが可能になります。しかも無料です。こんな見た目です。\n\n\nなぜAUX／Groupトラックにフリーズが必要か？\nこちらが今回作成したセッションです。\n＜スクショ１＞\n\n\n見ての通り単純にKick, Snare, HatsをAUXトラックに纏めてドラムBussを作りました。一番下の『Drum Buss (AUX1)』と書いてあるトラックがドラムBussとして纏めたAUXトラックです。\nこの『Drum Buss (AUX1)』にWavesのTG12345を挿しました。\nとても良いChannel Stripですが、CPUへの負担が結構ありますね、、。\n\n画像右上のCPU\/HDのメーター見ると判りますが、TG12345のみでCPU\/RAM使用率が結構上がっています。\nこれが更にベースBuss、メロディBussと増えていけばCPUオーバーロードとなってしまいます。\n他にも例えば”Lindel 80″の様にオーバーサンプリング機能を持つChannel Stripは音質は凄く良いですが、やはり重いです。\n\nなので今回はこのAUXトラックをフリーズしてCPU\/RAM負担を軽減しよう、と言うのがこの記事の趣旨です。\n\n本来LogicやAbleton Liveには、AUX／Groupトラックをフリーズする機能はありません。\nしかし上記のMChannelMatrixを使えばフリーズする事が可能になります。\n\nまた、この小技を応用すればセンドリバーブもフリーズする事が可能です。\nリバーブの種類を多く使い別ける人にも是非応用してみて欲しいです。\n\nAbleton Liveの人はこちらから見て下さい。\n\n全部読むのメンドイ！って人はこちらからまとめを見てください！\n\n\nLogicでのセットアップ\n＜スクショ２＞\n\n\nまず、上の＜スクショ１＞の状態から更に一番下にオーディオトラック『Freeze Track』を追加しました。\nその新規オーディオトラック『Freeze Track』に”MChannelMatrix”を挿しています。\n\nMChannelMatrixの設定\n＜スクショ２＞のMChannelMatrixの”SIDE-CHAIN”の箇所（＜スクショ２＞のピンク色の丸）を図の通りに設定します。1=1(left), 2=2(right), となります。\n次に、MChannelMatrixの入力ソース元（＜スクショ２＞の緑色の丸）を”Bus 1″に設定します。これは『Drum Buss (AUX1)』が”Bus 1″を経由している為です（Logicでは自動的にその様に設定されますので、特に設定を弄らなければ同じ様に「Bus 1 = AUX 1」となります）。\nチャンネルのルーティング設定\n『Drum Buss (AUX1)』のOutputを”No Output”に設定します（＜スクショ２＞の水色の丸）。\n音はMChannelMatrixを挿したチャンネル『Freeze Track』から出るので、この『Drum Buss (AUX1)』の出力を”No Output”に設定して切ってしまいましょう。切らないと双方から音が出るので爆音になります、気を付けましょう。\n\nフリーズをする為のリージョンを作成する\nさて、これで『Drum Buss (AUX1)』の音が『Freeze Track』から出る様になっている筈ですが、『Freeze Track』にリージョンが存在しない為、このままではフリーズできません。\nそこで自分は取り敢えずオーディオトラックにMIDIのリージョンを挿入しました。以下の＜スクショ３＞の様な感じです。\n＜スクショ３＞\n\n\n『Freeze Track』にある赤丸の部分が挿入したMIDIリージョンです。リージョンの内容はいたってシンプルで、水色の丸の様にC3のノートをリージョンの頭から最後まで引いただけです。\n\nオーディオトラックにMIDIのリージョン？って思うかもしれませんが、このリージョンがある事によってフリーズできる様になります。\n\nフリーズしよう！\n＜スクショ４＞\n\n\n＜スクショ４＞の赤色の丸の部分をクリックしてフリーズします。\n『Drum Buss (AUX1)』に挿してあるTG12345をオフにします（＜スクショ４＞のピンクの丸）。\nこれで『Freeze Track』がフリーズされました。TG12345を切った分CPU\/RAMの使用率が大幅に下がったのが判ると思います（＜スクショ４＞の緑色の丸）。\nこの状態で音が出てるのは『Freeze Track』からのみになりますので、もし関連する他のトラックにもエフェクトを使っている場合は全てオフにしてしまいましょう。\n\n＜スクショ４＞では『Freeze Track』からのみ音が出てるよって分かりやすくする為『Drum Buss (AUX1)』のフェーダーを一番下まで下げていますが、上記でOutputを”No Output”に設定している為、特にフェーダーを下げる必要もありません。\n\n以上がLogicでの設定方法です。\n\n再度編集が必要に場合は、UnfreezeしてAUXトラックのエフェクトをオンにしましょう。\n編集が終わったら再度フリーズしてAUXトラックのエフェクトをオフにします。\n\n次はAbleton Liveでの設定方法です。\n\nAbleton Liveでのセットアップ\n＜スクショ５＞\n\n\nこのセッションでは、ベース５トラックをグループ化して『Bass Buss』を作成しました。『Bass Buss』に挿してるエフェクトは、Sonalksis EQ → Lindel 80 → Fabfilter Pro-Lの三つです。\n\n正直”Sonalksis EQ”と”Fabfilter Pro-L（オーバーサンプリング未使用）”の二つはCPU負担が小さいので、ここでは”Lindel 80″がCPUへの負担となっています（＜スクショ５＞の水色の丸部分）。\n\n“Lindel 80″はデフォルトでオーバーサンプリングが x2 になっているので、結構速いコンピュータでも10トラック以上に挿したらそれなりな負担になってくると思います。\n\nなので、今回はこのグループトラック『Bass Buss』をフリーズします。\n\nMChannelMatrixの設定\n＜スクショ６＞\n\n\nMIDIトラックを作成します。『Bass Buss』のグループ内ではなく必ずグループ外に作成しましょう。\nここではそのMIDIトラックに『Bass Freeze』と名前を付けています（＜スクショ６＞の赤色の丸）。\n＜スクショ６＞のMChannelMatrixの”SIDE-CHAIN”の箇所（＜スクショ６＞のピンク色の丸）を図の通りに設定します。1=1(left), 2=2(right), となります。\n次に、”Sidechain”の入力元（＜スクショ６＞の緑色の丸）を『Bass Buss』に設定します。\n最後に『Bass Buss』の出力を切ります（＜スクショ６＞の黄色の丸）。切らないと『Bass Buss』と『Bass Freeze』双方から音が出てしまうので爆音になります。忘れずに切りましょう。\nこれでルーティングは完了です。現状『Bass Buss』でエフェクト処理された音がMChannelMatrixを通って『Bass Freeze』に出力されています。\nただし現状ではMIDIクリップが無いので、このままではフリーズできません。なので次にMIDIクリップを作成します。\n\nフリーズをする為のMIDIクリップを作成する\n＜スクショ７＞\n\n\n『Bass Freeze』にMIDIクリップを作成しました（＜スクショ７＞の水色の丸）。クリップの中は単純にC3のノートを頭から最期まで引いただけです。\n因みに小技ですが、C3ノートを頭に置いて”Legato”ボタン（＜スクショ７＞の緑色の丸）を押すとMIDIクリップの最後の部分までノートの長さを勝手に調整してくれます。便利です。\n\nフリーズしよう！\n＜スクショ８＞\n\n\n『Bass Freeze』トラックををフリーズします。\n『Bass Buss』に挿してあるエフェクトをオフにします（＜スクショ８＞の赤色の丸）。\n再確認ですが『Bass Buss』の出力は切ってある状態である事を確認して下さい（＜スクショ８＞のピンク色の丸）。\nこれで現状『Bass Buss』の音は『Bass Freeze』でフリーズされました。『Bass Buss』で使用していた分のCPU\/RAMが解放されたのが分かると思います（＜スクショ８＞の緑色の丸）。\n\n再度編集が必要に場合は、UnfreezeしてGroupトラックのエフェクトをオンにしましょう。\n編集が終わったら再度フリーズしてGroupトラックのエフェクトをオフにします。\n\n全部読むのがメンドイ人向けにまとめます！\nApple LogicとAbleton Live、それぞれでAUX／Groupトラックをフリーズする方法を箇条書きにして纏めたいと思います！\n\nApple LogicでAUXトラックをフリーズする方法\nMChannelMatrixをインストールする。\nフリーズしたいAUXトラックのすぐ下にAudioトラックを作る。\n2で作成したAudioトラックにMChannelMatrixをインサートする。\nMChannelMatrixのSIDE-CHAINを1=1(left), 2=2(right)と設定する。\nMChannelMatrixのSide Chainの入力ソースをフリーズしたいAUXトラックに設定する。\nフリーズしたいAUXトラックのOutputを”No Output”に設定する。\n2で作成したAudioトラックにMIDIのリージョンを作成する。\n7で作成したMIDIのリージョンにC3ノートを頭からケツまで一本で描く。\n8をやる事によって、2で作成したAudioトラックをフリーズ出来る様になるので、フリーズする。\nフリーズが終わったらAUXトラックのエフェクトをオフにする。\nこれでAUXトラックで使われていたCPU\/RAMが解放されました。\n\n再度編集が必要に場合は、UnfreezeしてAUXトラックのエフェクトをオンにしましょう。\n編集が終わったら再度フリーズしてAUXトラックのエフェクトをオフにします。\n\nAbleton LiveでGroupトラックをフリーズする方法\nMChannelMatrixをインストールする。\nフリーズしたいGroupトラックの下（Group内ではなく外）にMIDIトラックを作る。\n2で作成したMIDIトラックにMChannelMatrixをインサートする。\nMChannelMatrixのSIDE-CHAINを1=1(left), 2=2(right)と設定する。\nMChannelMatrixのSide Chainの入力ソースをフリーズしたいGroupトラックに設定する。\nフリーズしたいGroupトラックの出力を切る。\n2で作成したMIDIトラックにMIDIクリップを作成する。\n7で作成したMIDIクリップにC3ノートを頭からケツまで一本で描く。\n8をやる事によって、2で作成したMIDIトラックをフリーズ出来る様になるので、フリーズする。\nフリーズが終わったらGroupトラックのエフェクトをオフにする。\nこれでGroupトラックで使われていたCPU\/RAMが解放されました。\n\n再度編集が必要に場合は、UnfreezeしてGroupトラックのエフェクトをオンにしましょう。\n編集が終わったら再度フリーズしてGroupトラックのエフェクトをオフにします。"},{"title":"コンプレッサーはEQの前？後ろ？","url":"https:\/\/tubm.tokyo\/mixingmastering\/521\/","text":"コンプレッサーはEQの前？後ろ？\n\n楽曲をミックスしてる時、EQはコンプの前？後ろ？って気になった事ありませんか？自分は気になった事ありました。\nミックスを教えている生徒さんやミックスを依頼されたお客様からも何度か聞かれた事もあります。\n\nなので気になるのかな？と思ったのでブログに纏めてみました。\n\nまぁ誰に聞いても帰ってくる言葉はほぼほぼ同じです\n「曲や素材によるんですよね〜」とか「ケースバイケース」とかまぁぶっちゃけその通りで、そもそもミキシングに正解は無く『結果が良ければ何でも良い』というのがミキシングです。\n\nしかしそれじゃこのブログ意味ないじゃん！ﾀﾋね！ってツッコまれそうなので、このブログでは考察と共にある程度の『答え』を出してみたいと思います。\n\nトラッキング（各トラックへの処理）でよく使われるのはコンプをEQの前に挿す方\nとりあえずスタンダードな感じでそうしよ、って感じで決める人もいるんじゃないかな、と思います。でもそれには理由も幾つかありますね。\n\n1. その方が作業量が少なくて済む可能性が高い（かな？）\n「EQ→コンプ」の場合と「コンプ→EQ」のロジック的な違いは、先にコンプをかけて設定すればスレッショルドを通るシグナルが決定されます。つまりその辺りのパラメーターは（一度決めれば）固定で良くなります。\n\n先にEQを通す場合は、カットやブーストが出力する信号の値を変化させるので、 『EQを弄ればスレッショルドを通る信号が変化＝スレッショルドも再調整する必要がある（かもしれない）』って事になります。つまりコンプを先にしておけば後からEQを弄ってもコンプの調整をし直す必要が無く楽ですね、となります。\n\n2. コンプでアタックとかの調整できるよね\n例えばKickを例にしてみましょう。Kickって実は低い方から高い方の周波数レンジをカバーしている楽器なんですが、ここではザックリとトランジェントが2kHz~8kHzとして、Bodyというか「バン！」とか「ドン！」とか表現されるファンダメンタルとなる部分の音を50Hz~150Hzとします。 これにアタック感やパンチを加えるのはコンプレッサーの値を正しく設定すれば可能です。なので『コンプを先に通して設定→足りない分をEQで補う』という使い方もアリだと思います。\n他楽器、ベースやギターでも同じ事が言えますね。\n\n3. コンプレッサーは周波数特性を変える\n特にコンプを強くかけた特に顕著ですがハイやローエンドが減衰するのは良くあります。この場合もEQをコンプレッサーの後にする事により、例えば『コンプレッサーで減衰した帯域をEQで調整する』といった使い方ができます。\n\n\n大きな問題を解決する場合はEQが先の方が良い\nここでは例としてスタジオで録音されたベースをミキシングしているとしましょう。そんで何故か２弦の５フレットのGだけヤケに音が大きい（ネックが曲がって共振してる、とか単にそのベーシストが下手だとか色々な原因があると思いますが）等の場合は帯域を狭くしたEQで98Hzをカットしてからコンプに通した方が良いです。\nコンプを先にかけても、そのやけにうるさい一音の部分でコンプがかかり過ぎて音が潰されちゃったりとか幾つかの問題が想定できます。なので『先にEQでその部分を解決してからコンプをかける』方がよりEvenで綺麗にコンプかかるんじゃないかな、と思います。\n\n他の楽器やボーカルでも同じ様に、何故か特定の帯域だけがうるさいと思う様な場合はEQで問題点をある程度解決してからコンプレッサーかけるのが良いでしょう。\n\nところで、何故２弦の５フレットのGだと98Hzなの？\n\nって思った人はこちらの記事に各ノート（音程）を周波数で表したテーブルを作っておいたのでEQ処理やミックス処理に役立ててもらえれば嬉しいです。またはFabfilter Pro-Q3やVoxengo Span（無料）を使ってスペクトラムアナライザーから周波数=ノートを特定する事も可能です。\n音階と周波数\n下にスクロールするとそれぞれの音程を周波数で表したチャートがあります。自分の楽器の音域、声の声域を認識できるし、ミキシングエンジニアとしてもミックスする際に使う場面も（稀に…\n続きを読む\n\n音階と周波数\nスペクトラムアナライザ見ればノート（音程）は分かる\nhttps:\/\/www.fabfilter.com\/products\/pro-q-3-equalizer-plug-in https:\/\/splice.com\/plugins\/1022-span-vst-au-by-voxengo この記事ではスペクトラムアナライザの結果を視覚的にノート…\n続きを読む\n\nスペクトラムアナライザ見ればノート（音程）は分かる\nMix BusやSub Group等ではコンプが最後\nもうこれは自分の感覚で書いちゃいますが、コンプ最後に持ってきた方が楽器同士の分離感が上手く出る様な気がします。\nあとはよく言われる”glue”（統一感とかそういう意味ですかね、、）されてる感じが出るっていうのはあるような気がしなくもないですね、、、。楽曲の中で一番音量レベルが大きいダイナミクス系の楽器であるKickやSnareがトリガーになってちょっとしたドライブ感が出るって感じでしょうか？リズム的な意味でタイトになる気がします。\n\nでも結局はケースバイケース\nいろいろ書きましたが結局は「ケースバイケースですよね〜」って事で締めくくろうかと思います爆\n\n因みにこれを書いてる筆者的にはあまり拘りはなく『EQで不要な帯域があればカット（特に低域はハイパス結構使います）したりレゾナンスもカットしたり、たまにエグいEQかけたりとかも→コンプでアタック感出したり叩いたり揃えたり→EQで最終調整』って事もやりますし、深く考えず自由にやってます。\n結局のところ『結果が良ければ何でも良い』んです。（ハイこのブログの意味無くなりました〜）                                                                   "},{"title":"KillA808 - ilLegalがEmanateのプレイリストに乗りました ^^","url":"https:\/\/tubm.tokyo\/pickout\/1275\/","text":"KillA808 – ilLegalがEmanateのプレイリストに乗りました ^^\n\n大変ありがたい事に、今イチオシの音楽プラットフォーム「Emanate」のオフィシャルのプレイリスト「Highlight of the week Feb 1」にKillA808のビートが選ばれましたので宣伝です ^^\n\nEmanateについてはブログ書こうかと思っていますが、deadmau5などの音楽とテクノロジーのパイオニアや、その他多くのビッグネームが推してるオーストラリア発のブロックチェーンベース音楽ストリーミングプラットフォームです。\n\n現在まだアルファテスト中みたいですが、このプラットフォーム実は造り手側（ミュージシャン・アーティスト・プロデューサーや作曲家）にとってもリスナー側にとっても今まででは考えられないレベルで良いんですよ（収益が）。\n\nリスナーもただ聴くだけはなく自分の好きな曲をプレイリストにして人に聞いてもらう事によって収益を得る事ができる様になる、との事でリスナー参加型なのが良いですね。\nリスナーも曲を紹介する事で楽しめるし将来性が凄いです。\n\nEmanateに関しては別途ブログ書くとしまして、今回はEmanateのオフィシャルのプレイリストに曲を掲載して頂いたので宣伝となります〜。\n\nプレイリストはこちらからどうぞ！: https:\/\/emanate.live\/playlist\/61fd8a61d69a2375ec1de53f"},{"title":"音階と周波数","url":"https:\/\/tubm.tokyo\/mixingmastering\/575\/","text":"音階と周波数\n\n下にスクロールするとそれぞれの音程を周波数で表したチャートがあります。自分の楽器の音域、声の声域を認識できるし、ミキシングエンジニアとしてもミックスする際に使う場面も（稀に）あります。\n\nこれを見ればスペクトラムアナライザからある程度音程を把握する事ができます。\nチャート見るのメンドイって人は分かり易いプラグインもあるので 次の記事 で紹介します。\n\n次の記事     スペクトラムアナライザ見ればノート（音程）は分かる https:\/\/www.fabfilter.com\/products\/pro-q-3-equalizer-plug-in https:\/\/splice.com\/plugins\/1022-span-vst-au-by-voxengo この記事ではスペクトラムアナライザの結果を視覚的にノート… 続きを読む\n\n平均律ノート毎の周波数（A440）"},{"title":"KillA808 - da lofi sh!tがEmanateのプレイリストに乗りました ^^","url":"https:\/\/tubm.tokyo\/pickout\/1934\/","text":"KillA808 – da lofi sh!tがEmanateのプレイリストに乗りました ^^\n\nまたまた大変ありがたい事に、今イチオシの音楽プラットフォーム「Emanate」のオフィシャルのプレイリスト「Highlights of the week | June Week 1」にKillA808のビートを載せていただいたので宣伝です ^^\n\nビートはDrillです、かなりぶっといベースが特徴でサブウーファーがあるクラブ等、ある程度大きなサウンドシステムでの再生で威力を発揮します！\n\n*Emanateは最近ベータに移行して、NFTも取り扱える様になった今アツい音楽ストリーミングプラットフォームです。\nWeb3やNFTに興味がある音楽関係の方は是非チェックしてみてください！\n\nプレイリストはこちらからどうぞ！: https:\/\/emanate.live\/playlist\/629e81cfe4cb780686755718"},{"title":"DUBBLE UPがiTunesレゲエチャートで１位！","url":"https:\/\/tubm.tokyo\/pickout\/dubble-up-charted\/","text":"DUBBLE UPがiTunesレゲエチャートで１位！\n発売された今日いきなり１位！\n\nTUBMでは2021年の時にレゲエチャートで１位取って以来ですね！素晴らしい！Humming君のプロダクションもパズ君のリリックもカッコいいしfeatで入ってるキムライオン君もスキルあるしTsutchieさんのマスタリングもヤバいしでそりゃチャート取るよ！って思いました！是非聞いて下さい！マジもんReal Tokyo Dub Bangerです！"},{"title":"RouteNoteへのアカウント登録","url":"https:\/\/tubm.tokyo\/misc\/routenote-account-registration\/","text":"RouteNoteへのアカウント登録\n\nTUBMでもNFTを売り始め、ありがたい事に買って頂いています <(_ _)> 2023年1月からTUBMで売り始めた このNFT の様に今後も音楽の収益を受け取る権利の販売をNFTで行なっていく予定です。\n\nこのNFTの収益分配をUSドルで受け取りたい方は、RouteNoteというアグリゲーター（ディストリビューター）を通して支払を行います。 このブログではRouteNoteへのアカウント登録方法をスクショ付きで解説します。\n\n今回もスマホのスクショで解説しますがPCでも基本的なレイアウトは変わらないので、簡単に応用できると思います。\n\nまずはRouteNoteにアクセスしよう:\nまずはRouteNoteにアクセスします。\nRouteNote: Digital Music Distribution Unsigned Musicians and Labels: Free Digital Music Distribution and sell your music worldwide on iTunes, Spotify, YouTube and more.  routenote.com\n\nアクセスして右上のハンバーガーメニューをタップします。\n\nアカウントを作成する:\nタップするとメニューが開きます。このスクショ画面中央にある青いボタン「Get Started」をタップします。   必要情報を入力します   アカウント作成に必要な情報を入力します。\nUsername  → ユーザーネームを決めて入力してください。この情報をTUBMへ申請してもらう事により収益の分配ができる様になりますので、忘れない様に取っておいてください。アカウントを作成後に確認する事も可能です。\nEmail address  → RouteNoteへ登録するEメールアドレスです。ログイン情報ですのでこちらも忘れない様にしましょう。\nCreate password  → パスワードを設定します。\nConfirm password  → パスワードを確認します。\nSecurity Question  → 秘密の質問です。好きな項目を選んでください。悩んだらとりあえず一番上が「Who s your favorite band\/musician?（貴方の好きなバンド・ミュージシャンは？）」という質問になっているので、それが分かりやすいかと思います。\nSecurity Answer  → 秘密の質問に対する答えを入力します。アカウントのアクセスを無くした場合必要になるので忘れない様に保管しましょう。\nPayPal email address  → 収益を受け取るためのPayPalのEメールアドレスを入力します。必ずPayPalに登録しているEメールアドレスを入力してください。アカウント作成後にも変更や修正可能ですが、ここで入力してしまえば後は放っておいても収益が入ってくる様になります。Stay up to date with RouteNote news  → RouteNoteからのニュースレターを受け取るか否か、選択できます。興味ない人はチェックマークは空のままにしておきます。\nI agree to RouteNote’s Terms & Conditions  → RouteNoteの利用規約に合意してください。合意がないとアカウント作成されません。\n最後にGoogleのリキャプチャ「私はロボットではありません」にチェックマークを入れ、青いボタン「Sign Up」をタップして完了です。     確認メールが届きます\nRouteNoteに登録したEメールアドレス宛にRouteNoteから確認メールが届きます。メール中央にある「Confirm Email Address」のボタンをタップします。\n\nこれでRouteNoteにアカウントが作成されました。\nユーザーネームを再確認   この記事の「必要情報を入力します」のセクションでも書きましたが、TUBMから収益を受け取るのにRouteNoteのユーザーネームが必要になります。このユーザーネームはRouteNoteにアカウントを作成する時に作成してユーザーネームになりますが、万が一忘れてしまった、という人の為にユーザーネームの確認方法を書きます。\n\nログインして最初の画面の右上に「Your Account」という青色ボタンがあるのでそれをタップします。タップすると二つのタブが開くので上の「Profile Preferences…」をタップします。\n\nタップするとアカウントの登録情報が出てきます。"},{"title":"Gash & Neo Nao – Chakuchiを紹介して頂きました！","url":"https:\/\/tubm.tokyo\/pickout\/344\/","text":"Gash & Neo Nao – Chakuchiを紹介して頂きました！\n\nインスタの @japanese_rap_lyric さんのページで紹介して頂きました！大変有難いです m(_ _ )m 是非@japanese_rap_lyricさんのページ覗いてみてください、色々なラップが出てて面白いです！\nView this post on Instagram\nA post shared by Japanese_rap_lyric (@japanese_rap_lyric)                                                                                 "},{"title":"実は繊細なMIX時にも使えるプラグイン「Rift Filter Lite」","url":"https:\/\/tubm.tokyo\/mixingmastering\/rift-filter-lite\/","text":"実は繊細なMIX時にも使えるプラグイン「Rift Filter Lite」\n\n凄い使えるプラグインあったので紹介したいなぁと思って勝手に紹介したいと思います。 ちょっと前まで無料だったんですが、今は29ドルとかで売られてますね。\n\n基本的にはモーフモーフしてくれるモーフィングフィルターです。 「モーフモーフってなんだよﾀﾋねよ！」って思った方も居ると思いますのでパラメーター見れるサイズでスクショ貼ります。\n\nこのMorphって言うパラメーターが面白いんですが、多分フィルターの種類毎にFilter Shapeの動きがアサインされてます。設定したCut-offとResonanceのパラメーターを基準としてフィルターの形を変えていきます。Morphタイプ、Peakingタイプ、Haromonicタイプである程度のパターンはあるように思いますが、まだ自分は使いこなせてないのでもうちょい勉強します ><   メーカーの宣伝通りかなり柔軟なフィルターでMIDIインプットでカットオフ値を弄れたりピッチスナップと言ってカットオフ値をスケール内に入れたり、ハーモニクスのコントロールまで考えられてて便利です。 フィルターも24種類あって（中には使い所あるのかな？ってのもあるんですが）とにかく面白いです。\n\nやはりメーカーがよく紹介するのは派手な使い方ですよね。宣伝し易いですしね。オフィシャルから使い方動画も出してるので是非見てください（ こちら  から見れます）。   この動画では二つのRift Filter Liteを立上げてマクロを使って二つ種類のフィルターのMorphをインバースコントロールする、と言うような事をやってます。これだけでもかなり派手な音になりますね。\n…….。\n\nもうなんか宣伝記事になっちゃいましたが、今回本当に紹介したかった部分は、「実はこのプラグイン繊細なミックス時にも使えるじゃん！」って思ったので、こんな使い方もあるよ〜って感じの記事を書くつもりでした。\n\n真ん中にStereo Spreadのノブがあるんですが、これがとても良い感じにステレオ感出してくれます。\n左右でオフセットを作る事で聴感的な広がりを感じます。Morphと組み合わせると動きも加わってかなり良い感じになります。 繊細な感じから派手な感じまで表現できます。\nPadやRhodesや色んなシンセサウンドなど使い所はかなりあると思うのですが、今回面白そうなのでベースにかけてみました ^^   少し歪ませてる808の音でやってみました。150hz以下はモノラルにしておきたいので帯域を別けて、150hz以上のみにRift Filter Liteを使っています。   Spreadを少し広げて、Notch系のフィルターでモーフィングしてみたらベースに広がりと動きが出た気がしなくもないです。\n\n結果は以下の通りです。YouTubeでご確認ください〜。  ＊低音の方なのでヘッドホンかまたは低域までちゃんと聴こえるモニター推奨です。                                                                                 "},{"title":"スペクトラムアナライザ見ればノート（音程）は分かる","url":"https:\/\/tubm.tokyo\/mixingmastering\/check-note-with-spectrum-analyzer\/","text":"スペクトラムアナライザ見ればノート（音程）は分かる\n\nこの記事に出てくるプラグイン:\n・FabFilter Pro-Q 3 - Equalizer Plug-In FabFilter Pro-Q 3 is a high quality equalizer plug-in with unrivalled sound and interface. Available in VST, VST3, AU, AAX and AudioSuite formats for Windows and macOS  www.fabfilter.com\n・SPAN by Voxengo - Plugins (VST, AU) | Splice Get SPAN by Voxengo and learn how to use the plugin with Ableton Live, Logic, GarageBand, and FL Studio for free.  splice.com\n\nこの記事ではスペクトラムアナライザの結果を視覚的にノート（音程）に変換してくれる便利なプラグインを紹介します。 結構知ってる人も多いと思うので特別な知識でも何でもない記事ですが、 前の記事 の補足的要素の記事です。\n\n前の記事:\n音階と周波数 下にスクロールするとそれぞれの音程を周波数で表したチャートがあります。自分の楽器の音域、声の声域を認識できるし、ミキシングエンジニアとしてもミックスする際に使う場面も（稀に… 続きを読む\n\n因みにですが今回紹介するプラグインはFabfilter Pro-Q3です。 有名なEQですし知ってる人も多いと思います。なので結構使ってる人は知ってると思いますが、これ周波数をノートで表してくれる機能が付いてるんですよね。 今回はベース３種類（筆者はベース音好き）を使ってどの様にPro-Q3のアナライザーが反応するかを見ていきたいと思います。因みにですが、Voxengo Span（これはアナライザーですね）は無料で同じ様な機能が付いてるらしいです（筆者は使った事ないので記事にはしませんが）。\n\nまずはサイン波の低音で見てみましょう。:\nサイン波は倍音など含まない純粋なトーンなので分かり易いですね。低音のAは55Hzになっています。またスペクトラムの下にはピアノの鍵盤で音程が表示されてて非常に分かり易いですね。\n\n 次はちょっと複雑にReese系のベースでやってみました。\nこれはSawなど倍音を多く含む音で、ノイズなども色々混ざった音なので帯域が上の方まで行っていて聴いた感じはちょっと複雑ですが、アナライザーではちゃんと一番下のノートはA（110Hz）になってますね。\n\n最後は実際にベースを弾いた時の音です。\nこれはオクターブ上（２弦３フレット）のFの音です。これも一番下で出っ張ってる音の周波数を見ると約87Hzになっているのでしっかり分析されてますね（当たり前の事ですが）。\n\n知っていればたまには役に立つ。\nまぁぶっちゃけこれを知ってても使い所はそこまで多くはないんですけどね、、。筆者の場合はミキシングのお仕事のご依頼を頂いた時になぜか使う必要があった為使った感じです（理由は全く記憶にございません）。"},{"title":"PAZOODOG - Night on Earthが「MUSIC TANK セレクション」チャンネルでも配信されます！","url":"https:\/\/tubm.tokyo\/pickout\/4\/","text":"PAZOODOG – Night on Earthが「MUSIC TANK セレクション」チャンネルでも配信されます！\n\n株式会社U-NEXT MUSIC TANK運用チーム様よりメッセージを頂き、「MUSIC TANK セレクション」のチャンネルで配信される事になりました！\n\n〜〜〜以下転送文〜〜〜〜〜\n配信開始日：9月17日（金）より順次配信  ※配信期間は4週間前後を予定しております\n▼配信アプリ  「SMART USEN」 http:\/\/smart.usen.com\/\n▼配信チャンネル   「MUSIC TANK セレクション」http:\/\/smart.usen.com\/ch02501\/  セレクションチャンネルでは、MUSIC TANKにご応募いただいた楽曲の中から選りすぐりの楽曲をまとめてお送りします。\n〜〜〜〜〜〜〜\n\nとの事です！色々な新しい音楽聴けるアプリですので是非DLしてみて下さい！                                                                                  "},{"title":"本当に誰でも買える！音楽NFTの買い方（その１ - ウォレットのセットアップ）","url":"https:\/\/tubm.tokyo\/web3\/how2buy-nfts\/","text":"本当に誰でも買える！音楽NFTの買い方（その１ – ウォレットのセットアップ）\n\nNFTを買う為のウォレットをセットアップ\n\nTUBMでは2023年から音楽NFTの販売を始めます！それに伴い今回は本当に誰でも購入できる様に凄くシンプルなNFTの買い方を説明したいと思います。専門用語も可能な限り省きます。また現代はスマホの使用率の方がPCより高いので全てスマホで完結する方法です。\n\nTUBMの音楽NFTは全てPolygonネットワークで行われる予定ですので今回はPolygonネットワーク上でNFTを買う為にウォレットを設定する方法の案内です。\n\nPolygon(MATIC)とはEthereumのセカンドレイヤーとして機能…云々を書くと難しくなるので分かりやすく言えばNFTの取引が行われているマーケットにはネットワークと言うモノがあります。 世の中の交通手段（ネットワーク）に車、電車、自転車や飛行機等がある様にブロックチェーンにもネットワークと言うモノが存在します。走行中の車から電車に飛び乗る事ができないのと同じで、NFTや仮想通貨は基本的に同じネットワーク内で移動（取引）されます。\n\nEthereumが一番メジャーだと思います。その他Polygon, BSC, Solana等色々ありますがTUBMではPolygonにフォーカスします。\n\n理由としてはガス代（取引の手数料みたいなモノだと思ってください）が安く取引が速い。そして今注目を集めているWeb3音楽プラットフォーム（ Emanate ）や音楽NFTマーケットプレイス（ MODA DAO ）でも導入が進んでいる事、そしてやはり将来性が極めて高い事です。大手のOpenSeaでもPolygonネットワークで取引できます。\n\nウォレットをダウンロードする\nNFT売買では仮想通貨ウォレットというものが必要になります。MetaMaskは大体どこでも使えるのでMetaMaskで説明します。下のリンクに行ってアプリをDLしましょう。PCの場合はChrome等ブラウザーのエクステンションとしてMetaMaskが使えます。\n\nThe crypto wallet for Defi, Web3 Dapps and NFTs | MetaMask A safe crypto wallet for digital tokens & NFTs. Join the blockchain and DeFi world.  metamask.io\n\nMetaMaskの設定方法\nスマホでのMetaMask設定方法はこちらのブログが一番解り易かったのでリンク貼らせて頂きました m(_ _)m\n【スマホアプリ版】MetaMaskのインストール方法・手順【5分で完了】 スマホアプリへのMetaMaskのインストールと、設定の流れを順番に解説します。iPhoneやAndroidのスマホからメタバース系のサービスを利用したい方はアプリ版のMetaMaskをご利用ください。  mtmo.jp\n\nMetaMaskにPolygonネットワークを追加する\n上記の通り設定ができればMetaMaskは初期状態で下のスクショの赤丸の様にEthereum Main Networkというネットワーク名で起動するはずです。\n\nこれにPolygonネットワークを追加します。 上のスクショの赤丸の部分、ウォレットをタップするとこの様な画面が出てきます。\n\nここで青いボタン「Add a network」をタップします。\n\nタップすると下のスクショの様にネットワークを選択できる画面が出るので、ここで「Polygon Mainnet」を「Add」します。\n\n「Add」するとこんな画面が出てきます。\n\nこれはMetaMaskがネットワークを追加して良いかどうかの認証を求めるモノなので気にせず青い「Approve」ボタンをタップします。続くページで「Switch to network」と言う青いボタンが出てくるのでそれもタップします。\n\nこれでPolygonネットワーク上でNFTを買う為のウォレットの設定はできました。下のスクショの赤丸の様にウォレットが「Polygon Mainnet」になってる事、そして基本通貨もピンク丸の様に「MATIC」になっている事も確認してください。ネットワークの切替はウォレットをタップすればいつでも切替可能です。\n\n次のページでは、おそらく日本で一番簡単に買える仮想通貨「JPYC」を買う方法を案内します。\n本当に誰でも買える！音楽NFTの買い方（その２ - JPYCを購入する）"},{"title":"ブログカテゴリー","url":"https:\/\/tubm.tokyo\/blog\/","text":"ブログのカテゴリーリスト:\n\n・AI\n・Mixing&Mastering\n・Our NFTs\n・Web3\n・おすすめの楽曲\n・ピックアップ情報\n・プログラミング\n・音楽とお金\n・その他"},{"title":"サポート用 AI Chat Bot のバックエンド解説","url":"https:\/\/tubm.tokyo\/ai\/make-your-own-bot\/","text":"サポート用 AI Chat Bot のバックエンド解説\n\nPython (Flask) で貴方専用のサポート用チャットbotのバックエンドを作ってみよう！\n\n今回が一発目のプログラミング系記事になります。   一発目は、Embeddingを用いただけのbotではなく、Faissで作成したインデックスIDとChat GPTの自然言語理解（NLU）機能を組み合わせて、必要な情報を高精度で取得するボットの作り方について説明します。 なんで音楽レーベルがプログラミングやってんだ って思うかもしれませんが、プログラムが得意だからです。たまには案件もらえるし、レーベルの金（と生活費）稼ぐためなら徹夜でず〜っとプラグラミングしてる時もあります。   あまり言っても信じてもらえない事が多いんですが、音楽のProduceとプログラミングって似てるなぁとか思ってます。細かい事は省きますが両方ともインスピレーションが大事なのは間違い無いです。\n\nまずはBOTの機能を見てみましょう   右下のあるTUBM BOTに質問してみてください。このサイトに載っている情報を参照して答えてくれる、言わばこのサイトのサポートをやってくれているBOTです。このサイトでは、例えばミキシングサービスを提供してるので「ミキシングの価格を教えてください」とか、何でも良いので質問してみてください。   （たまに失敗する時もありますが）おそらく参照ページ付きでAIが貴方に返信したと思います。 これの仕組みは主に二つの仕組みから成り立っています。必須なのはEmbeddingといって、テキストのベクトル化です。ベクトル化とはテキストを数値として定量化する事です。例としてあるとこんな感じです（ここでの数値は適当です）。   \"hello\" → [-0.0123, 0.0456, 0.7890, -0.3210, ..., 0.5678]   テキストをベクトルに定量化することで、FAISS（Facebook AI Similarity Search）を活用して高速なベクトル間の距離計算が可能になります。FAISSで作成したインデックスはバイナリファイルとして保存し、高速な検索基盤を構築できます。   また、FAISSでインデックスを作成する事により、後に紹介する機能、GPT3.5や4のNLU（自然言語理解）の機能を使った参照ドキュメントIDの取得もできます。この機能がかなりこのチャットbotの精度を上げてくれる大事な部分です。 （詳しい機能の詳細はこのブログを最後まで見てね！O(≧∇≦)O イエイ！！ ）   コード晒します ！   コードの説明するならコード見ながらやるのが一番早いので、バックエンドのコード晒します。 GitHub にアップしたので、自由にダウンロードしてください。     GitHub - tokyoundergroundbeatzmassive\/chatbot_backend4pythonanywere Contribute to tokyoundergroundbeatzmassive\/chatbot_backend4pythonanywere development by creating an account on GitHub.  github.com   （ただし、このバージョンはStream機能（このサイトのbotの様にパラパラとテキストが出力される機能）は付けていません。このバックエンドはPythonanywhereの無料枠でホストできちゃう仕様にしていますが、PythonanywehreではWebSocketやSever Sent Eventsサポートしてないんですよね、、しかし、Lineを集客のメインとしている様な、店舗さんやオプチャのオーナーさんなどが使うには十分な機能を持っています。元々LineやらWhatsAppやらはStream機能が無いですしね。）   Stream機能以外はこのサイトで使っているバックエンドとほぼ同じですが、この記事で公開するのはシングルスレッドなので、一つのバックエンドにつき一人のチャットbotオーナーさん、といった感じです。複数のオーナーが一つのバックエンドを共有する事はできません。   ＊このバックエンドだけでは作動しません。対応するバイナリファイルや参照テキストがないとプログラム自体立ちあがりません。参照として使うテキストをEmbedding（ベクトル化）して、Faissのインデックスやベクトル検索に使うvectors.npy、およびそのIDとマッチするIDやテキスト情報をもつreference.jsonを作成して、メインのapp.pyと同じ層において下さい。   難しいと思う方は、AI TECH TEAMでローカルFlaskアプリとして販売してるので、是非使ってみて下さい。URLやサイトマップをスクレイピングしてテキストを取得、PDFをパースしてテキスト取得、あとはCSVなどのフォーマットで情報をEmbeddingできるアプリを販売しています。 （そのうちWeb Appにしてサブスクでも公開する予定です。）     あなたのHPにAIチャットBotを設置して業務効率化！ (Simple Version) by AI TECH TEAM Embeddingボットの製品シンプルバージョンです！ AIのサポートbotをWordpressサイトにおいて…  ittaita.com   この製品にはEmbedding用ローカルのFlaskアプリ、Pythonanywhereの無料枠でホストできるバックエンドFlask、そしてフロントエンドとなるWPプラグイン、Lineと繋ぐGASスクリプトが付属しています。   自分のwordpressのサイトにパラパラテキスト（streaming）のチャットbot置きたい！って方や、Embeddingやその他設定もブラウザのみで完結できたら楽なのに、、、って思う方は近日中にEC2で作った方のバックエンドをサブスクで公開しますので、それをお待ちください。できるだけ安価で提供する予定です。   すみません >< 宣伝が入ってしまいましたが、それでは実際にコードを見て各関数やルートが何を行っているのか、見ていきましょう。   コード解説   コードの先頭から行きます。まずはFlaskで使うライブラリとGlobal変数の設定（初期化）です。   from flask import Flask, request, jsonify, make_response, render_template, redirect, url_for from flask_httpauth import HTTPBasicAuth import openai from openai.error import ServiceUnavailableError import tiktoken from collections import deque import numpy as np import faiss import json from datetime import datetime, timedelta import csv from langdetect import detect import validators import os import re from sklearn.metrics.pairwise import cosine_similarity openai.api_key = \"\" app = Flask(__name__) # Global variables MAX_REQUESTS = float('inf') RESET_TIME = 3600 threshold = 0.7 model = 'gpt-3.5-turbo-16k' knowledge_about_user = \"\" response_preference = \"\" log_option = 'off' history_maxlen = 12 USERNAME = 'admin' PASSWORD = 'password' questions = [] corresponding_ids = []   最初のライブラリの読み込み箇所に関してはググればそれぞれが何のライブラリなのかわかるので省略します。ChatGPTに質問してみるのも良いでしょう。とにかくこれらのライブラリがこのプログラムを動かすのに必要という事です。   Flaskの設定をしたら、次にGlobal変数の初期値を設定します。これらは続く関数やルートで更新され使用されます。それぞれのGlobal変数の役割も続く関数やルートの説明の中で同時に説明します。   設定に関する関数   def load_config():     global MAX_REQUESTS, RESET_TIME, threshold, model, knowledge_about_user, response_preference, log_option, history_maxlen, USERNAME, PASSWORD, questions, corresponding_ids     try:         with open(os.path.join(os.path.dirname(__file__), 'settings.json'), 'r') as f:             config = json.load(f)             openai.api_key = config.get('api_key', openai.api_key)             MAX_REQUESTS = float(config.get('max_requests', MAX_REQUESTS))             RESET_TIME = int(config.get('reset_time', RESET_TIME))             threshold = float(config.get('threshold', threshold))             model = config.get('model', model)             knowledge_about_user = config.get('knowledge_about_user', knowledge_about_user)             response_preference = config.get('response_preference', response_preference)             log_option = config.get('log_option', log_option)             history_maxlen = int(config.get('history_maxlen', history_maxlen))             USERNAME = config.get('USERNAME', 'admin')             PASSWORD = config.get('PASSWORD', 'password')             # Convert the string to a list             questions_str = config.get('questions', '')             questions = questions_str.split(\"\\n\") if questions_str else []             corresponding_ids_str = config.get('corresponding_ids', '')             corresponding_ids = corresponding_ids_str.split(\"\\n\") if corresponding_ids_str else []     except FileNotFoundError:         pass load_config()  # Call the function right after defining it auth = HTTPBasicAuth() @auth.verify_password def verify_password(username, password):     # ここでユーザー名とパスワードを検証します。     return username == USERNAME and password == PASSWORD @app.route('\/config', methods=['GET']) @auth.login_required def config():     # Set the default settings     settings = {         'api_key': openai.api_key,         'max_requests': MAX_REQUESTS,         'reset_time': RESET_TIME,         'threshold': threshold,         'model': model,         'knowledge_about_user': knowledge_about_user,         'response_preference': response_preference,                 'log_option': log_option,         'history_maxlen': history_maxlen,         'USERNAME': USERNAME,         'PASSWORD': PASSWORD,         'questions': \"\\n\".join(questions) if questions else '',         'corresponding_ids': \"\\n\".join(corresponding_ids) if corresponding_ids else ''     }     try:         # Try to load the settings from the JSON file         with open(os.path.join(os.path.dirname(__file__), 'settings.json'), 'r') as f:             file_settings = json.load(f)             settings.update(file_settings)  # Update the settings with the values from the file     except (FileNotFoundError, json.JSONDecodeError):         pass  # If the file does not exist or is not valid JSON, just ignore the error          # MAX_REQUESTSの小数点を省く     if settings['max_requests'] == float('inf'):         settings['max_requests'] = str(settings['max_requests'])     else:         settings['max_requests'] = str(int(settings['max_requests']))          # Zip the questions and corresponding_ids     zipped_questions_ids = list(zip(questions, corresponding_ids))     # Pass the zipped list to the template     return render_template('config.html', zipped_questions_ids=zipped_questions_ids, **settings) @app.route('\/save_config', methods=['POST']) def save_config():     global MAX_REQUESTS, RESET_TIME, threshold, model, knowledge_about_user, response_preference, log_option, history_maxlen, USERNAME, PASSWORD, questions, corresponding_ids     # Retrieve the settings from the POST request     openai.api_key = request.form.get('api_key')     max_requests = request.form.get('max_requests')     MAX_REQUESTS = float(max_requests) if max_requests.strip() != '' else float('inf')     RESET_TIME = int(request.form.get('reset_time'))     threshold_str = request.form.get('threshold')     if threshold_str is not None:         threshold = float(threshold_str)     model = request.form.get('model')     knowledge_about_user = request.form.get('knowledge_about_user')     response_preference = request.form.get('response_preference')     log_option = request.form.get('log_option')     history_maxlen = int(request.form.get('history_maxlen'))     USERNAME = request.form.get('USERNAME')     PASSWORD = request.form.get('PASSWORD')     questions = request.form.getlist('questions[]')     corresponding_ids = request.form.getlist('corresponding_ids[]')     # Save the settings to a JSON file     with open(os.path.join(os.path.dirname(__file__), 'settings.json'), 'w', encoding=\"utf-8\") as f:         json.dump({             'api_key': openai.api_key,             'max_requests': MAX_REQUESTS,             'reset_time': RESET_TIME,             'threshold': threshold,             'model': model,             'knowledge_about_user': knowledge_about_user,             'response_preference': response_preference,               'log_option': log_option,             'history_maxlen': history_maxlen,             'USERNAME': USERNAME,             'PASSWORD': PASSWORD,             'questions': \"\\n\".join(questions),             'corresponding_ids': \"\\n\".join(corresponding_ids)         }, f, ensure_ascii=False)     # Redirect to the configuration page     return redirect(url_for('config'))   コードを見ると、まずload_config()関数が呼び出されていますが、実際にはまず\/configルート（バックエンドのURL\/config）で各種設定と内容をjsonファイルに保存する必要があります。Open AIのAPIキーなども設定保存するので、\/configルートで設定しないとチャット自体ができません。なのでフロントエンドとして使っている自作のWPプラグインには、プラグインダッシュボードに\/configルートへのリンクを付けて、まずconfigページに誘導しています。\/configルートにはHTTPBasic認証を設定して保護しています。そのため「@auth.login_required」が\/configルートで使われています。   \/save_configのルートはその名の通り、configで設定した値をjsonファイルに保存してglobal変数を更新します。   global MAX_REQUESTS, RESET_TIME, threshold, model, knowledge_about_user, response_preference, log_option, history_maxlen, USERNAME, PASSWORD, questions, corresponding_ids   この箇所でglobalの値として更新していますが、これはマルチスレッドではやっちゃダメです。スレッドセーフじゃないです。しかし今回のケースではシングルスレッドなので、この様にglobalの値として更新するのがコード的にも簡単になります。   そして一度設定した値は、プログラムが再起動された場合には load_config()関数から呼び出され、同じようにglobalの値として更新します。   その他のglobalスコープでの設定   続くコードの部分もglobalで設定しています。   # Load your data file_path = os.path.join(os.path.dirname(__file__), 'reference.json') with open(file_path, 'r') as f:     data = json.load(f)     documents = data          # Load the vectors vectors_path = os.path.join(os.path.dirname(__file__), 'vectors.npy') vectors = np.load(vectors_path) # Set the dimension of the vectors dimension = 1536 # Create a new FAISS index index = faiss.IndexFlatL2(dimension) # Add the vectors to the index index.add(vectors) # OpenAIのモデルに対応するトークナイザを取得 enc = tiktoken.get_encoding(\"cl100k_base\") def count_tokens_with_tiktoken(text):     return len(enc.encode(text)) def trim_to_tokens(text, max_tokens):     tokens = enc.encode(text)     if len(tokens) <= max_tokens:         return text     else:         trimmed_tokens = tokens[:max_tokens]         return enc.decode(trimmed_tokens) # Initialize history and last active time as dictionaries history = {} last_active = {} # ユーザーIDとリクエスト数を保存するパラメーター user_requests = {}   まず、参照のファイル reference.jsonを呼び出し、dataの内容をdocumentsとして設定します。このdataには参照する三つのフィールド “title”, “url”, “text” が含まれています。このdocumentsを使って後の関数でユーザーの質問の内容とEmbeddingされた情報の類似性の計算や、その他の機能でも使われます。   続く部分で、ベクトルファイル vectors.npy が読み込まれ、インデックスの作成とそのインデックスにベクトル（Embeddingされたデータ）を追加します。EmbeddingにはOpen AIのtext-embedding-ada-002が使われているので、次元は1536となります。   次の enc の定義の部分とcount_tokens_with_tiktoken関数およびtrim_to_tokens関数は、言語モデルのトークン数を確認したり調整する目的で使われます。 tiktokenはOpenAIがGitHubで公開しているライブラリで、テキストの使用token数を確認する機能があります。その機能を使って使用されているtoken数を確認、制限を超える場合には古い履歴をトリムする機能をtrim_to_tokens関数として設定しています。 これらの関数はチャットのメインとなる\/messageルートから呼び出されますので、後でどの様な処理をしているかを確認できます。   最後に、history、last_active、user_requestsは続くmessage関数やそこで呼び出される関数でuser_idを付与されて使われるので、ここでglobalとして辞書として初期化しています。   では、次にメインとなる部分、ユーザーとAIのチャットを実行する\/messageルートの説明に行きます。get_similar_faiss_id関数も\/messageルートから呼び出されるので、その中で解説したいと思います。            AI プログラミング          <strong>ユーザーからのメッセージを\/messageルートにPOSTで受け取る<\/strong> 次のページへ  ページ:   2   3                                                                                  "},{"title":"サポート用 AI Chat Bot のバックエンド解説2","url":"https:\/\/tubm.tokyo\/ai\/make-your-own-bot\/2\/","text":"サポート用 AI Chat Bot のバックエンド解説2\n\nユーザーからのメッセージを\/messageルートにPOSTで受け取る   少し長いので、本当はもっと機能毎に関数で分けたりした方が良かったかもしれません。一気に書いたコードなので、その辺はあまり考えませんでした。   @app.route('\/message', methods=['POST']) def message():     global model     data = request.get_json()     user_message = data['message']['text']     user_id = data.get(\"user_id\")     session_id = data.get(\"session_id\")   最初にmodelだけglobalで宣言をしているのは、このmessage関数内で一度modelの値が変更される為です。なので、ここでglobalの値としてmodelを宣言する事により、load config関数で設定されたmodelがそのまま使える様になります。マルチスレッドの場合はこのやり方できませんが、これはシングルスレッドなのでコードが単純になります。   data = request.get_json()の行は、HTTP POSTリクエストのJSONペイロードをPythonの辞書として取得し、フロントエンドからuser_message, user_id, session_idを取得します。       # Initialize the history for this user or session if it doesn't exist     if user_id not in history:         history[user_id] = deque(maxlen=history_maxlen)         last_active[user_id] = datetime.now()          # Print the user ID and session ID     print(f\"User ID: {user_id}\")     print(f\"Session ID: {session_id}\")     print(f\"User message from user {user_id}: {user_message}\")      # ユーザーIDが存在しない場合は初期化     if user_id not in user_requests:         user_requests[user_id] = {'count': 0, 'last_request': datetime.now()}     # ユーザーのリクエスト数をチェック     if user_requests[user_id]['count'] >= MAX_REQUESTS:         # 最後のリクエストから一定時間が経過していれば会話履歴とMAX_REQUESTSをリセット         if datetime.now() - user_requests[user_id]['last_request'] > timedelta(seconds=RESET_TIME):             user_requests[user_id] = {'count': 0, 'last_request': datetime.now()}         else:             return jsonify({\"error\": \"Too many requests\"}), 429          # RESET_TIMEの秒数間inactiveの場合は履歴を削除     if datetime.now() - user_requests[user_id]['last_request'] > timedelta(seconds=RESET_TIME):         history[user_id].clear()     # リクエスト数を増やす     user_requests[user_id]['count'] += 1     user_requests[user_id]['last_request'] = datetime.now()   この部分を簡潔にまとめるとこうです。     if user_id not in history:: ユーザーの会話履歴を初期化。   if user_id not in user_requests:: ユーザーのリクエスト情報を初期化。   if user_requests[user_id][‘count’] >= MAX_REQUESTS:: リクエスト数が上限に達したか確認。   if datetime.now() – user_requests[user_id][‘last_request’] > timedelta(seconds=RESET_TIME):: リセット時間が過ぎたか確認し、リセット。   return jsonify({“error”: “Too many requests”}), 429: リクエストが多すぎる場合、エラーを返す。   history[user_id].clear(): 長時間非アクティブな場合、履歴をクリア。   user_requests[user_id][‘count’] += 1: リクエスト数を増加。   user_requests[user_id][‘last_request’] = datetime.now(): 最後のリクエスト時間を更新。         # actual_titlesとactual_urlsを空のリストとして初期化     actual_titles = []     actual_urls = []          # ユーザーメッセージの言語を検出     language = detect(user_message)          # メッセージのプレフィックスを設定     if language == \"ja\":         prefix = \"データベースによると:\"     else:         prefix = \"According to our database:\"              # questionsとcorresponding_idsを組み合わせてプロンプトを作成     combined_list = \"\\n\".join([f\"{q} - ID: {id_}\" for q, id_ in zip(questions, corresponding_ids)])          # matched_idsを空のリストとして初期化     matched_ids = []              # combined_listが空でない場合のみget_similar_faiss_id関数を呼び出す     if combined_list:         # get_similar_faiss_id関数を呼び出す         matched_ids = get_similar_faiss_id(model, user_message, user_id, history, prefix, combined_list)         print(f\"Returned Matched IDs: {matched_ids}\")     else:         print(\"No questions and corresponding IDs provided. Skipping the Q&IDs process.\")   この箇所も箇条書きでまとめます。     actual_titles = []とactual_urls = []: 参照されたタイトルとURLを格納するための空のリストを初期化。   language = detect(user_message): ユーザーメッセージの言語を検出。   if language == “ja”:: 言語に応じてプレフィックスを設定。会話の履歴に「データベースによると」というPrefixから始まる参照用の履歴を作成する事により、AIがデータベースを参照しているとという事を理解しやすくなる。   combined_list = “\\n”.join(…): 質問と対応するID（questions, corresponding_ids）を組み合わせて一つの文字列にします。get_similar_faiss_id関数で使われる値です。\/configルートで設定をします。Q&IDsという後に説明する機能の為に設定しますが、質問とそれに対応するFaiss ID（書類ID）を設定する事により、GPT3.5や4のNLU（自然言語理解）機能を使った類似度を計算できる様になります。Q&AよりもFlexibleな情報参照ができます。   matched_ids = []: get_similar_faiss_id関数で一致したIDがあればそれを格納するため、空のリストを初期化。   if combined_list:: 質問とIDが存在する場合、get_similar_faiss_id関数を呼び出す。     get_similar_faiss_id関数の機能について   get_similar_faiss_id関数を呼び出す箇所が出てきたので、関数の解説をします。以下が関数です。   def get_similar_faiss_id(model, user_message, user_id, history, prefix, combined_list):     # 既存の履歴から必要なメッセージを抽出     messages = []     relevant_messages = [         msg for msg in history.get(user_id, [])          if msg[\"role\"] in [\"user\", \"assistant\"] and not msg[\"content\"].startswith(prefix)     ]     # 過去の会話履歴が存在する場合のみ、過去の会話履歴を文字列として結合し、メッセージとして追加     if relevant_messages:         past_conversation = \"\\n\".join([f\"Role: {msg['role']}\\nContent: {msg['content']}\" for msg in relevant_messages])         messages.append({\"role\": \"system\", \"content\": f\"Here is the past conversation of this user, use it if it helps understanding the context of user's query:\\n{past_conversation}\\n\"})          # ユーザーの背景情報をシステムメッセージとして追加     if knowledge_about_user:         messages.append({             \"role\": \"system\",             \"content\": f\"You are the knowledgeable assistant of following entity or association: \\n{knowledge_about_user}\\n\"         })          # ユーザーのクエリに関する指示を追加     instruction = (         f\"Given the user's query, identify and return the numeric ID(s) from the list of questions and their corresponding IDs: \\n{combined_list}.\\n\\n\"         \"If the context of the user's question matches any of the listed questions, return the corresponding ID(s). \"         \"Remember to return ONLY the numeric ID(s). If there's no match, return 'None'. You MUST NOT reply to the user's message directly, NOR ASK for further clarification.\\n\"     )          messages.extend([         {\"role\": \"system\", \"content\": instruction},         {\"role\": \"user\", \"content\": user_message}     ])          # メッセージの内容を表示     print(\"==== Messages List Content ====\")     for msg in messages:         print(f\"Role: {msg['role']}\")         if \"questions and their corresponding IDs:\" in msg['content']:             pre_text, post_text = msg['content'].split(\"questions and their corresponding IDs:\")             print(f\"Content: {pre_text}questions and their corresponding IDs:\")             print(post_text)  # combined_listの部分をそのまま表示         else:             print(f\"Content: {msg['content']}\")     print(\"===============================\")     # OpenAIのAPIを使用してユーザーメッセージと質問の類似度を計算     response = openai.ChatCompletion.create(         model=model,         messages=messages,         temperature=0.0     )     print(f\"OpenAI API Response: {response.choices[0].message['content']}\")          # レスポンスからIDを抽出     matched_ids = re.findall(r'\\d+', response.choices[0].message['content'])     print(f\"Matched IDs: {matched_ids}\")          return matched_ids[:2]  # 最初の2つのIDのみを返す   この関数は何を行うかというと、Q&IDsという私が考えたアイディアで、Q&Aとの違いは、’A’（答え）の代わりに’IDs’（識別子=このコードではFaiss ID）を使用する点です。例えば、Q&Aを参照してから答えを生成するというアイディアは以前からありましたが、一歩進めて「この質問に類似する質問が来た場合はこの書類ID（Faiss ID）を参照する」というプログラムにしています。 これにより参照先（例えばwebpage）がアップデートされた場合、アップデートした情報を参照する様になり、固定された答えに縛られずに、関連する情報からAIがレスポンスを生成できます。   以下に各機能をまとめます。     messages = []: メッセージのリストを初期化。   relevant_messages = […]: ユーザーとAIの会話の過去歴を抽出します。データベースとして使われる履歴（prefixがある履歴）はここで省いて、純粋なユーザーとAIの対話のみを残します。過去歴を参照する事により、よりユーザーの質問の意図がわかる可能性がある為です。   if relevant_messages: …: 過去の会話履歴があれば、それをメッセージリストに追加。   if knowledge_about_user: …: チャットbotのオーナー情報（例えば店舗や企業など）を \/configルートで設定していれば、それをメッセージリストに追加します。Chat GPTのフロントエンドの設定でカスタムインストラクションというのがあり、ご存知の方も多いと思います。それの「What would you like ChatGPT to know about you to provide better responses?」の部分と同じ役割を持っています。   instruction = …: ユーザーのクエリに対し「質問リスト（combined_listの値）にある質問と類似する質問である場合、それに対応するIDをreturnしてください」という様なプロンプトを形成しています。   messages.extend([…]): 上記のinstructionとユーザーのメッセージをメッセージリストに追加。   response = openai.ChatCompletion.create(…): OpenAIのChatGPT3.5や4のNLU（自然言語理解）機能を使って、上記で形成されたmessagesの値を使い、ユーザーメッセージと質問リストの類似度を計算します。ここではランダム性を減らし、可能な限り期待する答えを得る為にtempertureの値は0にしています。   matched_ids = re.findall(…): AIのIDをreterunした場合にはそれらがmatched_idsの値となります。ない場合は空の値 [] となります。   return matched_ids[:2]: 最大で2つのマッチしたIDを返すようにしていますが、ここを変更すればより多くのIDを返す事ができます。しかし、Embeddingした情報を参照する = データベースを会話履歴として参照 = より多くのトークンを使う、という事です。それぞれのIDが持つテキスト量が少なければここを増やしても問題ないでしょう。     ここまででget_similar_faiss_id関数に関する説明は以上です。次にまた\/messageルートの続きに戻ります。   \/messageルートの解説の続き   ではget_similar_faiss_id関数でmatched_idsを取得できたので、またmessage関数に戻ってきました。 頭のtemp_references = [] は重要度（ベクトル間の距離と類似性スコア）が低いものから先に参照履歴として追加する目的で一時的なリストを作成しています。これは履歴を削除する順番として重要度が低いものを先に追加する = 古い履歴になる為です。コードの作りとして一般的には古い履歴の方から削除またはトリムするのが普通だと思います。       # 参照IDを逆にする一時的なリスト（重要度が低い方から先にhistory.appendする）     temp_references = []     # マッチするIDが存在する場合、ベクトルの計算をスキップ     if matched_ids:         for matched_id in matched_ids:             # IDを調整（CSVのオフセットを考慮）             adjusted_id = int(matched_id) - 2                          # 該当するテキストをdocumentsから検索             if adjusted_id < len(documents):                 matched_document = documents[adjusted_id]                 matched_text = matched_document[\"text\"]                 matched_title = matched_document[\"title\"]                 matched_url = matched_document[\"url\"]                                  # actual_titlesとactual_urlsに追加                 actual_titles.append(matched_title)                 actual_urls.append(matched_url)                                  # temp_referenceに追加（後にhistory.appendされる）                 document_content = f\"{matched_title} {matched_text}\"                 temp_references.append({\"role\": \"assistant\", \"content\": f\"{prefix} {document_content}\"})   if matched_ids: の部分は、get_similar_faiss_id関数でmatched_idが返された場合に実行される処理です。つまり、ユーザーのメッセージがQ&IDsリストにない場合には実行されません。逆にリストと合致するとAIが判断した場合はmatched_idにはFaiss IDの値が代入されます。   adjusted_idは実際のFaiss IDと人間が見た時のCSVで異なる部分、例えばFaiss IDは0から始まるが、CSVは1から、そしてヘッダーがあるため、CSVで見る番号から -２ する事によってIDの番号の帳尻が合います。   続くコードの概要です。     matched_document = documents[adjusted_id]: adjusted_idに基づいてdocumentsから該当する文書を取得します。   matched_text = matched_document[“text”]: 取得した文書から本文を抽出します。   matched_title = matched_document[“title”]: 取得した文書からタイトルを抽出します。   matched_url = matched_document[“url”]: 取得した文書からURLを抽出します。   次に、actual_titlesとactual_urlsリストにそれぞれタイトルとURLを追加しています。これらは後でユーザーに参照として表示したり、ログに関する機能で使用されます。   最後に、頭で初期化した辞書、temp_referencesリストに該当する文書の本文を追加しています。     次のページでは、if matched_ids:の条件ではない時、つまりelseの処理について説明します。            AI プログラミング          <strong>ここがEmbeddingで一番重要な箇所です<\/strong> 次のページへ  ページ:  1    3                                                                                  "},{"title":"サポート用 AI Chat Bot のバックエンド解説3","url":"https:\/\/tubm.tokyo\/ai\/make-your-own-bot\/3\/","text":"サポート用 AI Chat Bot のバックエンド解説3\n\nここがEmbeddingで一番重要な箇所です   このelseは、前ページのif matched_ids:のelseです。つまり、get_similar_faiss_id関数でmatched_idが無い場合の処理です。ここで初めてユーザーメッセージもEmbedding（ベクトル化）され、事前にEmbeddingされた情報と合わせて、ベクトル間の距離や類似性の計算を行う事になります。   大まかな流れをおさらいするとこうです。 \/messageルートで受け取ったメッセージをまずはget_similar_faiss_id関数でGPT3.5や4のNLU機能を使ってユーザーの質問の意図が事前に登録してある質問と近いかどうかを判断します。→ 近い場合にはmatched_idを返しますが、近い質問がない場合には空の値 [] を返します。→ [] が帰ってきた場合にはelseの処理、つまりユーザーメッセージベクトルと参照テキストベクトル間の距離と類似性の計算を実行します。       else:          # Vectorize the user's message using OpenAI's model         user_message_to_encode = user_message         try:             embedding_result = openai.Embedding.create(                 model=\"text-embedding-ada-002\",                 input=user_message_to_encode             )         except Exception as e:             print(f\"Error while embedding user message: {e}\")             return jsonify({\"error\": \"Failed to process user message.\"}), 500                  # print(f\"Embedding result: {embedding_result}\") # 不要になったら消す         user_message_vector = embedding_result['data'][0]['embedding']         # Query the index with the user's message vector         try:             D, I = index.search(np.array([user_message_vector], dtype=np.float32), 10)         except Exception as e:             print(f\"Error while searching the index: {e}\")             return jsonify({\"error\": \"Failed to search the database.\"}), 500         # D contains the distances to the n closest vectors in the dataset         closest_vector_distances = D[0]         # print(f\"Closest vector distances: {closest_vector_distances}\")         # I contains the indices of the n closest vectors in the dataset         closest_vector_indices = I[0]         # Get the documents corresponding to the closest vectors         closest_documents = [documents[i][\"text\"] for i in closest_vector_indices]         closest_titles = [documents[i][\"title\"] for i in closest_vector_indices]         closest_urls = [documents[i][\"url\"] for i in closest_vector_indices]         print(f\"Closest document FAISS IDs (adjusted for CSV): {[idx + 2 for idx in closest_vector_indices]}\")         print(f\"Closest document titles: {closest_titles}\")         # print(f\"Closest document urls: {closest_urls}\")         # コサイン類似性を計算する部分を組み込む         similarities = []         for title, doc in zip(closest_titles, closest_documents):             document_index = next((index for index, d in enumerate(documents) if d[\"title\"] == title and d[\"text\"] == doc), None)             if document_index is not None:                 document_vector = vectors[document_index]                 similarity = cosine_similarity([document_vector], [user_message_vector])[0][0]                 similarities.append(similarity)                 # print(f\"Title: {title}, Similarity: {similarity}\")  # タイトルとその類似性を出力             else:                 print(f\"Document not found in reference list: {title}\")                 similarities.append(0)         # 距離スコアとコサイン類似性のスコアを組み合わせて新しいスコアを計算         combined_scores = [0.5 * (1 - scaled_distance) + 0.5 * similarity for scaled_distance, similarity in zip(closest_vector_distances, similarities)]         print(\"Combined scores (Scaled FAISS distance + Cosine similarity):\", combined_scores)         # Thresholdを超えたIDを履歴に追加         # スコアと関連する情報を同時にソート         sorted_indices = np.argsort(combined_scores)[::-1]  # スコアを降順でソート         added_count = 0         for idx in sorted_indices:             score = combined_scores[idx]             if score >= threshold:                 title = closest_titles[idx]                 url = closest_urls[idx]                 doc = closest_documents[idx]                                  actual_titles.append(title)                 actual_urls.append(url)                                  print(\"Actual Referred titles: \", title)                 print(\"Actual Referred urls: \", url)                                  document_content = f\"{title} {doc})\"                 reference_content = f\"{prefix} {document_content}\"                 # temp_referenceに追加（後にhistory.appendされる）                 temp_references.append({\"role\": \"assistant\", \"content\": reference_content})                                  added_count += 1                 if added_count >= 2:  # 上位2つの結果のみを保存                     break   それではまたコードの機能を箇条書きでまとめます。     embedding_result = openai.Embedding.create… : この箇所でOpenAIのモデルを使用してユーザーメッセージをベクトル化しています。   D, I = index.search… : index.searchはFAISSライブラリの関数で、最も近いベクトルをデータセットから検索します。Dは距離を、Iはインデックスをそれぞれ格納します。   closest_vector_distancesとclosest_vector_indices : DとIは2次元配列で返されるため、[0]を使用して1次元配列に変換しています。   similarity = cosine_similarity… : scikit-learnライブラリを用いてコサイン類似性を計算しています。このライブラリは機械学習の多くのアルゴリズムや便利な関数を提供しており、コサイン類似性の計算もその一つです。   combined_scores =… : この部分で、FAISSから得られた距離（scaled_distance）とコサイン類似性（similarity）を組み合わせて新しいスコアを計算しています。0.5 * (1 – scaled_distance) + 0.5 * similarityという式を使用して、両者の平均を取っています。   if score >= threshold… : ここでは、計算されたcombined_scoresが設定された threshold を超えた場合、そのドキュメントのタイトル、URL、テキストを履歴に追加しています。     ここまでの流れで、matched_id がある場合でもない場合でもtemp_referencesに参照テキストが追加されました。要約すると、ChatGPTのNLUによるID取得（データベースとして履歴に追加）またはベクトル間の距離と類似性の計算をして、スコアのthresholdが設定値を超えた場合にはAIが参照するテキストをデータベースとして履歴に追加します。   実際にチャットを行う部分のコード   次のコードでは取得したデータベース、システムメッセージおよびユーザーメッセージを会話履歴としてChatGPTに送り、レスポンス（回答）を取得します。   先頭の部分でtemp_referencesの順序をreverseして、重要度（ベクトル間の距離と類似性スコア）が低いものから先に参照履歴referenceとして追加します。これは履歴を削除する順番として重要度が低いものを先に追加する = 古い履歴になる為です。       # 一時的なリストを逆順にして、historyに追加     for reference in reversed(temp_references):         history[user_id].append(reference)       # Calculate the total tokens for messages in history[user_id]     total_tokens = sum(count_tokens_with_tiktoken(message[\"content\"]) for message in history[user_id])     print(f\"Total tokens: {total_tokens}\")          # ChatCompletionのモデル     model = data.get(\"model\", model)          # Set the token limit based on the model     if model == 'gpt-4':         token_limit = 8000     elif model == 'gpt-3.5-turbo-16k':         token_limit = 16000     else:         token_limit = 4000  # Default              print(f\"Selected Model and its Token Limit: {model, token_limit}\")     # Define trimmed_content before the loop     new_message = {\"role\": \"assistant\", \"content\": \"\"}     trimmed_content = \"\"     # While the total tokens exceed the limit, trim messages     while total_tokens > token_limit:         # If the oldest message is a reference from the assistant, prioritize trimming\/removing it         if history[user_id][0][\"role\"] == \"assistant\" and prefix in history[user_id][0][\"content\"]:             tokens_to_remove = count_tokens_with_tiktoken(history[user_id][0][\"content\"])             history[user_id].popleft()             total_tokens -= tokens_to_remove         # For any other messages, trim\/remove it from the oldest         else:             tokens_to_remove = count_tokens_with_tiktoken(history[user_id][0][\"content\"])             if tokens_to_remove > total_tokens - token_limit:                 trimmed_content = trim_to_tokens(history[user_id][0][\"content\"], total_tokens - token_limit)                 history[user_id][0][\"content\"] = trimmed_content             else:                 history[user_id].popleft()             total_tokens -= tokens_to_remove     # Update and add the new AI message only if there was any trimming     if trimmed_content:         new_message[\"content\"] = trimmed_content         # Add the new AI message to history only if it's not empty         history[user_id].append(new_message)              # 最初のシステムメッセージでユーザーの立場や背景に関する情報を提供     if knowledge_about_user:  # knowledge_about_userが空でない場合のみ追加         knowledge_prompt = f\"You are the knowledgeable assistant of following entity or association: {knowledge_about_user}\"         history[user_id].append({\"role\": \"system\", \"content\": knowledge_prompt})     # 次のシステムメッセージで返信に関する指示     if response_preference:  # response_preferenceが空でない場合のみ追加         response_prompt = f\"You must follow the response style with following instruction: {response_preference}\"         history[user_id].append({\"role\": \"system\", \"content\": response_prompt})          # ユーザーのメッセージを履歴に追加     history[user_id].append({\"role\": \"user\", \"content\": user_message})          try:         response = openai.ChatCompletion.create(             model=model,             messages=list(history[user_id])         )     except ServiceUnavailableError:         return jsonify({\"error\": \"The server is overloaded or not ready yet. Please try again later.\"}), 503     except Exception as e:         print(f\"Error while generating chat completion: {e}\")         return jsonify({\"error\": \"Failed to generate a response.\"}), 500     # AIのレスポンスに参照を追加する     if actual_titles:         references = \"\"         for title, url in zip(actual_titles, actual_urls):             if validators.url(url):                 references += f'<br><br><a href=\"{url}\" target=\"_blank\">{title}<\/a>'             else:                 references += f'<br><br>{title} ({url})'         new_message = {\"role\": \"assistant\", \"content\": response['choices'][0]['message']['content'] + references}     else:         new_message = {\"role\": \"assistant\", \"content\": response['choices'][0]['message']['content']}     # トリム後のトークン数を確認     new_message_tokens = count_tokens_with_tiktoken(new_message[\"content\"])     print(f\"Tokens in final new_message (after AI response): {new_message_tokens}\")     # Check if the new message would cause the total tokens to exceed the limit     while sum(count_tokens_with_tiktoken(message[\"content\"]) for message in history[user_id]) + count_tokens_with_tiktoken(new_message[\"content\"]) > token_limit:         # Remove the oldest message         history[user_id].popleft()     # Add the new message     history[user_id].append(new_message)     print(f\"Conversation history for user {user_id}: {history[user_id]}\")   それではまた各コードのパートを箇条書きでまとめていきます。     total_tokens = sum(…): tiktokenを使ってhistory[user_id]内の全メッセージのトークン数を計算します。   model = data.get(“model”, model): 使用するモデルです。基本的には\/configルートで設定された値をglobalスコープとして使っています。   if model == ‘gpt-4’: …: モデルに応じてトークンの制限数を設定します。   while total_tokens > token_limit: トークン数が設定された制限を超えた場合、古いメッセージをトリムまたは削除します。最も古いメッセージが参照用のデータベースである場合、そのメッセージを優先して削除します。これは前述のコードでtemp_referenceをreverseして重要度の高いメッセージをより新しい履歴として加える為、重要度が低いデータベースが先に削除される様に設計しています。→削除後のメッセージのトークン数を計算します。→それでもtoken制限をオーバーしてる場合は、古い履歴からメッセージをトリムまたは削除します。この処理でトータルのトークン数が制限内に収まるように調整されます。   if trimmed_content: トリムが行われた場合には、トリムされた内容でhistoryを更新します。   if knowledge_about_user:とif response_preference:では、システムメッセージを追加しています。configページで設定したカスタムインストラクションです。   response = openai.ChatCompletion.create(…): ここまでの流れでhistory[user_id].appendされた内容、つまり会話履歴や参照したデータベースをlistとしてOpenAIのモデルへ送信し、レスポンスを生成します。エラーハンドリングも含まれています。   if actual_titles: AIのレスポンスに参照（タイトルとURL）を追加します。最初にtemp_referenceをreverseしてreferenceとしているので、重要度の高い参照書類から順に表示されます。フロントエンドでユーザーがハイパーリンクをクリックするとそのURLに行く事ができるようにコードを組んでいます。   new_message_tokens = count_tokens_with_tiktoken(…): AIからのレスポンスnew_messageのトークン数を計算します。   while sum(…) > token_limit: AIからのレスポンスを含む新しいメッセージ履歴を追加する前に、トークン数が制限を超えないか確認します。超える場合、古い履歴を削除します。   history[user_id].append(new_message): 新しいメッセージをhistoryに追加します。     最後にFine-Tuningで使えるログ機能等の説明   最後はlog_optionです。これは\/configルートでoff, fine_tune, そしてvector_score_logの三つがあります。       if log_option == 'fine_tune':         try:             # Check if the file is empty (i.e., if it's a new file)             file_path = os.path.join(os.path.dirname(__file__), 'fine_tuning_data.csv')             is_new_file = not os.path.exists(file_path) or os.stat(file_path).st_size == 0             # Log the user messages and AI responses to a CSV file             with open(file_path, 'a', newline='') as file:                 fieldnames = ['prompt', 'completion']                 writer = csv.DictWriter(file, fieldnames=fieldnames)                 # Write the header only if the file is new                 if is_new_file:                     writer.writeheader()                 writer.writerow({                     'prompt': user_message,                     'completion': response['choices'][0]['message']['content']                 })         except Exception as e:             print(f\"Error while logging in 'fine_tune' option: {e}\")     elif log_option == 'vector_score_log' and not matched_ids:         try:             # Check if the file is empty (i.e., if it's a new file)             file_path = os.path.join(os.path.dirname(__file__), 'vector_score.csv')             is_new_file = not os.path.exists(file_path) or os.stat(file_path).st_size == 0             # Log the distances and URLs etc... to a CSV file             with open(file_path, 'a', newline='') as file:                 fieldnames = ['user_message', 'title', 'id', 'score', 'actual_referred_urls', 'ai_response']                 writer = csv.DictWriter(file, fieldnames=fieldnames)                 # Write the header only if the file is new                 if is_new_file:                     writer.writeheader()                 # Ensure all lists have the same length                 while len(actual_urls) < len(closest_titles):                     actual_urls.append(None)                 adjusted_ids = [idx + 2 for idx in closest_vector_indices]                 for title, each_score, each_url, adj_id in zip(closest_titles, combined_scores, actual_urls, adjusted_ids):                     writer.writerow({                         'user_message': user_message,                          'title': title,                         'id': adj_id,                         'score': each_score,                         'actual_referred_urls': each_url,                         'ai_response': response['choices'][0]['message']['content']                     })         except Exception as e:             print(f\"Error while logging in 'vector_score_log' option: {e}\")   fine_tuneについては直感的にわかると思うので説明を簡単にしますが、これはOpenAIが要求する形でfine tuningのログをCSVで残します。なぜJSONではないか、というとやはりExcelやNumbersでAIのレスポンスを編集しやすくする為です。編集が済んだら以下のようなpythonスクリプト   import csv import json # システムメッセージを定義 system_message = {\"role\": \"system\", \"content\": \"ここにシステムメッセージを書く\"} # 出力用のJSONリスト output_json_list = [] # CSVファイルを読み込む with open('your_file.csv', 'r') as csvfile:     csvreader = csv.reader(csvfile)     next(csvreader)  # ヘッダー行をスキップ     for row in csvreader:         prompt, completion = row         # 各会話を構築         conversation = {             \"messages\": [                 system_message,                 {\"role\": \"user\", \"content\": prompt},                 {\"role\": \"assistant\", \"content\": completion}             ]         }         output_json_list.append(conversation) # JSONファイルとして保存 with open('output.json', 'w') as jsonfile:     json.dump(output_json_list, jsonfile, indent=4)   などを使ってjsonにコンバートすればOpen AIが要求するFine-Tuningのフォーマットに適合した形で出力されます。こんな感じですね。   {\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"What's the capital of France?\"}, {\"role\": \"assistant\", \"content\": \"Paris, as if everyone doesn't know that already.\"}]} {\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"Who wrote 'Romeo and Juliet'?\"}, {\"role\": \"assistant\", \"content\": \"Oh, just some guy named William Shakespeare. Ever heard of him?\"}]} {\"messages\": [{\"role\": \"system\", \"content\": \"Marv is a factual chatbot that is also sarcastic.\"}, {\"role\": \"user\", \"content\": \"How far is the Moon from Earth?\"}, {\"role\": \"assistant\", \"content\": \"Around 384,400 kilometers. Give or take a few, like that really matters.\"}]}   vector_score_logの方はthresholdの値を設定するときに最適値を探す目的で使います。   ログにこれらの情報が出力されます。     ‘user_message’: ユーザーのメッセージ   ‘title’: Faiss IDのタイトル   ‘id’: Faiss ID   ‘score’: ベクトル間の距離と類似度の合算スコア   ‘actual_referred_urls’: thresholdを超えて実際に参照されたURL    ‘ai_response’: AIからのレスポンス     これらの情報はthresholdを設定するのに役立ちます。何度か質問を送信してみて欲しい回答を得るために参照されているかどうかを確認してthresholdを調整します。デフォルトで0.7になっています。0~1の間で設定しますが、低ければより多くの情報を拾いますが、ノイズ（不要な情報）も拾います。高くするとよりマッチした情報のみを拾いますが、thresholdを超えないと情報を参照しないので、高すぎると何も参照しなくなってしまいます。   vector_score_logを確認することにより、各質問に対する”score”がわかるので、thresholdを設定する目的でこの機能は存在します。   関数の最後の部分とポートなどの設定する   最終的には、return responseでHTTPレスポンスオブジェクトを返しています。このレスポンスオブジェクトには、AIが生成したメッセージがJSON形式で格納されており、それがクライアント（フロントエンドや他の呼び出し元）に送られます。       response_data = {'message': new_message['content']}     response = make_response(jsonify(response_data))     response.headers[\"Content-Type\"] = \"application\/json\"     return response if __name__ == \"__main__\":     app.run(host='0.0.0.0', port=int(os.environ.get('PORT', 8080)), debug=True)   最後は、Flask Webアプリケーションを起動するためのエントリーポイントです。お使いの環境に合わせてポート番号などを調整して下さい。            AI プログラミング          ページ:  1   2                                                                                    "},{"title":"Beat Store","url":"https:\/\/tubm.tokyo\/beatstore\/","text":"Beat Store\n\n最新のDrill, GrimeやLofiビートなどはNFTとして販売する予定です。今の所まだ販売はスタートしていませんが試聴可能になっています！"},{"title":"DUBPLATE","url":"https:\/\/tubm.tokyo\/dubplate\/","text":"DUBPLATE\n\nコロンビアミュージックやDef Jamからのリリースを経て、現在B-REGGER’S代表RAGGA-GさんとTUBMのコラボでDUBPLATEやります！   \n\nアーティスト:\nRAGGA-G\n\n1990年前半、都内CLUBを中心にReggae Deejayの活動を開始。  V.I.P Internationalのコンピレーション･アルバムへの参加をキッカケに全国区へ活動の場を広げる。    数々のレゲエ･コンピレーション参加やHIP HOPアーティストなどとの共演を経て、2004年 CRYSTAL MOVEMENTのメンバーとしてDEF JAM JAPAN –UNIVERSAL–よりメジャー･デビュー!!  歌とラップを共にこなす独特なシングジェイ･スタイル!!  ライムフロウと味のあるリリックスが定評で、各地に根強いファンを持つ人気アーティスト。\n\n2011年には自身が所属運営するB-REGGER’Sより  配信EP｢G’sWORLD｣とSoloAlbum｢NOT TOO LATE]を配信‼️    その後もリリースを重ねB-REGGER’Sが主催する渋谷BALLのイベントSUBWAYをオーガナイズし、10年以上続く熱量の高いHOTなPARTYを維持し続けている。\n\n【CD＆配信】\nV.A. \/ V.I.P HITS 2 〔ここが肝心〕／コロンビアミュージック1993　  V.A. \/ 志〔見上げれば月 〕／VIP INTERNATIONAL1995　  V.A. \/ JAH MATIC ONE〔山登り〕／Jah Matic1996　  GOKU – Cruisin’ \/〔DIALOGUE Feat DABO〕／Indies2000  UNITE \/〔PARTY Feat りゅう〕／SOB2000  男の中の男 \/ Feat: DJ TOSHIKI, Q, 山田マン, Hab I Screem, Buther, Zari／SOB2001　  EGGMAN – Project141 \/〔FREEDOM FREEDOM Feat Ashura〕／メリージョイ2002　  V.A. \/ RODEO CAAN DONE〔SUNDAY〕／カッティングエッジ2002　  EGGMAN – Project141 Meets — \/〔FREEDOM FREEDOM〕／メリージョイ2002　  XBS – ALLDAY ALLNIGHT \/ ALLDAY ALLNIGHT／カッティングエッジ2003　  BOOT REGGER \/ ZARI-RAGGA-G／B-REGGER’S2003  THA DOPE PROJECT \/ CRYSTAL MOVEMENT／Def Jam Japan2004　  V.A. \/ DAZZLIN GOLD〔飛んでナイス 〕／VIP INTERNATIONAL2004　  HI-D – GREAT SECOND \/〔TIGHT ROPE〕／Def Jam Japan2004  BOOT REGGER ２ \/ ZARI-RAGGA-G／B-REGGER’S2004　  V.A. \/ BLUE MISTY〔TONE DE NONBEE〕／Herbsman Record2004　  V.A. \/ DICE ONE〔Jesus Venus〕／Dice One2005　  V.A. \/ DANCEHALL HIGH!! Vol.2〔DANCEHALL HIGH〕／FLYING HIGH2005　  RAGGA-G&DA SPARS ／SUMMERDAY 1 AIM MUSIC2007  V.A.\/ Across The Border vol1 [ MAKE MY DAY]／Jah Matic2008  RAGGA-G\/NEW ATTEMPT／IntersextionRecoerds2008  RAGGA-G\/FIRE CRACKER／1AIM MUSIC2010  RAGGA-G\/余談featさいちゃん（THIRD EYE）／1AIM MUSIC2011  RAGGA-G\/HOUDAI／1AIM MUSIC2011  RAGGA-G\/G’sWORLD(配信限定EP)／B-REGGER’S2011  RAGGA-G\/NOT TOO LATE（配信SoloAlbum）／B-REGGER’S2011  DAZU-O DAZU BOX [LINK UP SOUND feat. RAGGA-G] 2012  RAGGA-G\/SATURDAY-DJ HIGH-D REMIX- feat.大＜オロチ＞蛇.DIEZEL.ROUGH／B-REGGER’S2012  RAGGA-G\/AINOHA SOUND／B-REGGER’S2012  K-WON\/アッラフォースタンス Feat RAGGA-G2013  ROMANTIC PRODUCTION\/GET FUNKY Feat AMBI, ZARI, RAGGA-G2013  V.A\/PRECIOUS WORLD ［FIGHT FOR YOUR RIGHT］／PW RECORDS2013  RAGGA-G\/茶茶茶 Feat ZARI／B-REGGER’S2014  RAGGA-G\/KANJIN Feat TAITANG／B-REGGER’S2014  RAGGA-G\/BLACK FOGGY ISLAND／B-REGGER’S2014  RAGGA-G\/E-NE／B-REGGER’S2015  RAGGA-G\/アレ⁉️がNIGHT feat SKY-B／B-REGGER’S2015  RAGGA-G\/KANJIN 〜e-mura REMIX〜feat TAITANG／B-REGGER’S2015  RAGGA-G\/ねこまっしぐら feat GAS BOYS／B-REGGER’S2015  Upset Heroes\/ALEGRIA feat RAGGA-G／STOIC RECORDS2015  RAGGA-G\/バンボーpt.2 feat MC HULK.MC SAI／B-REGGER’S2016  RAGGA-G\/Yama Nobori／B-REGGER’S2017  RAGGA-G\/「bachi-bachi」／B-REGGER’S2018  RAGGA-G\/RUB A DUB／B-REGGER’S2018  RAGGA-G\/FREE〜翼を下さい〜／B-REGGER’S2018  RAGGA-G\/真夏の風輪 2018  RAGGA-G\/JESUS VENUS／B-REGGER’S2018  RAGGA-G\/POW!! feat CHOP STICK.WASSY／B-REGGER’S2019  RAGGA-G\/AROUND50STANCE／B-REGGER’S2019  RAGGA-G\/SUBWAY／B-REGGER’S2019  RAGGA-G\/RISE UP／B-REGGER’S2020  RAGGA-G&TAMA ANT\/Bomb A Death／penixxxxx MusicMusic2020  RAGGA-G\/OPEN SESAME／B-REGGER’S2021  RAGGA-G\/導草 feat ADACHIMAN／B-REGGER’S2021  RAGGA-G\/SHAKA SHAKA／B-REGGER’S2021  RAGGA-G&PAZOODOG\/SOUND TRIP／TUBM2021  RAGGA-G\/宴／Shinobi Tracks2021  RAGGA-G&TAMA ANT\/パッキャマラード／Shinobi Tracks2021  どすこいラッパーズ\/どすこいラガ feat RAGGA-G／SHY BEAT MUSIC2021  RAGGA-G&PAZOODOG\/SAYONARA／TUBM2022  RAGGA-G\/FRASTRATION／B-REGGER’S2022  RAGGA-G\/SHINOBI-ISM／Shinobi Tracks2022  RAGGA-G\/SHINOBI-ISM(RAGGA HIP MIX)／Shinobi Tracks2022  RAGGA-G\/ZERO／B-REGGER’S2022  RAGGA-G\/DISASTER／Shinobi Tracks2022  RAGGA-G\/DISASTER (Digital GO-GO MIX)／Shinobi Tracks2022   【ポンコツインク】  ポンコツインクのテーマ  五もポンコツ  PONKOTSU NIGHT FEVER  ノリだけポンコツ  ポンコツリンク  常夏ポンコツ  ポンコツならではの  ポンコツラブストーリー  PONKOTSU MELTDOWN  ポジぽん\n\n【DVD】  The Masterpieces – AlldayAllnight Feat Tina+ADAN+Crystal　エイベックス2004\n\nサービスについて:\nRAGGA-GさんがTUBMスタジオで録音・MIXしてDUBPLATEを納品します。\n\nサービスには２種類あり、DUBPLATE（簡易MIXされたバージョン）とDUBPLATE + MIX（本MIXされたバージョン）があります。\nライブ現場で使いたい場合などはDUBPLATEで十分なクオリティーとなります。\n\n商業的に流通させたい、DJ MIXに入れたい、など配信に使用する場合はDUBPLATE + MIXをお勧めしていますがDUBPLATEでもある程度しっかりしたクオリティーは保っています。\n\n¥ 15,000   DUBPLATE\n¥ 22,000   DUBPLATE + MIX\n\n楽曲サンプル:\nこの動画は商用としてMIXされたものです。簡易MIXバージョンはこれからアップします。\n・[Reggae Drill] RAGGA-G & Manish-T - Follow Wi Now (Prod. KillA808) | Reggae Drill Massive 2023\n・[Reggae] RAGGA-G & T-MAN - ジャメイカの音楽で feat. KillA808 (Prod. Hayatobeatz) | Tokyo Reggae Massive 2023\n・[Political Hip-Hop] RAGGA-G & TAMA ANT - TAX (Prod. NSS)\n・[D&B Hip-Hop] RAGGA-G & PAZOODOG - Samurai Switch (Prod. KillA808)\n・[Reggae] RAGGA-G & PAZOODOG - SOUNDTRIP (Prod. KillA808 x Hayatobeatz) | Tokyo Reggae Massive 2021\n・[Sad Hip-Hop] PAZOODOG - SAYONARA feat. RAGGA-G (Prod. Hayatobeatz) | Sad J-HIPHOP 2022"},{"title":"コンタクトページ","url":"https:\/\/tubm.tokyo\/contact\/","text":"コンタクトページ\n\nお名前\nEメール (必須)\nメッセージ (必須)\n\n送信"},{"title":"NFTs","url":"https:\/\/tubm.tokyo\/nfts\/","text":"NFTs\n\n＊初回NFTは完売しました！次回は4月か5月位に次回NFTプロジェクトを予定しています。"},{"title":"Blog","url":"https:\/\/tubm.tokyo\/blog\/","text":"最新のブログのリスト:\n\nCategory: AI\nサポート用 AI Chat Bot のバックエンド解説    Python (Flask) で貴方専用のサポート用チャットbotのバックエンドを作ってみよう！ 今回が一発目のプログラミング系記事になります。 一発目は、Embeddingを用いただけのbotではな…\n\nCategory: Mixing&Mastering\nかなり使えるVSTシンセのプリセットを無料でGetしよう！    全部無料だぜ！ 今回は全作曲家向けの便利ブログです。初心者からプロまで、かなり使える無料プリセットをGetできるサイトを紹介します。プリセットを参考に新しい音を作るもよし、プリセットをそのまま使っても…\n\nCategory: Mixing&Mastering\nAbleton Live ver.11に対応するOptions.txtの設定リスト（全網羅）    Liveを使い易くカスタマイズしよう！ 今回は表題の通りAbleton LIve 11のOption.txtで設定できる機能全てのリストです。これからLiveを使おうと思ってる人も既にヘビーユーザーの…\n\nCategory: ピックアップ情報\nヒップホップチャート３４位！    iTunesヒップホップチャートでもチャートインする様になってきました！嬉しいですね ^^ この曲はヒップホップと言えるか怪しい感じではあるのですが、まぁチャートにインしちゃえば細かいことはどうでも良…\n\nCategory: その他\nRouteNoteへのアカウント登録    TUBMでもNFTを売り始め、ありがたい事に買って頂いています <(_ _)>2023年1月からTUBMで売り始めたこのNFTの様に今後も音楽の収益を受け取る権利の販売をNFTで行なってい…\n\nCategory: Web3\n本当に誰でも買える！音楽NFTの買い方（その２ – JPYCを購入する）    JPYCを購入する 前のブログではウォレット（MetaMask）のセットアップ方法とPolygonネットワークの追加について書きました。 https:\/\/tubm.tokyo\/web3\/how2buy…\n\nCategory: Web3\n本当に誰でも買える！音楽NFTの買い方（その１ – ウォレットのセットアップ）    NFTを買う為のウォレットをセットアップ TUBMでは2023年から音楽NFTの販売を始めます！それに伴い今回は本当に誰でも購入できる様に凄くシンプルなNFTの買い方を説明したいと思います。専門用語も…\n\nCategory: ピックアップ情報\nDUBBLE UPがiTunesレゲエチャートで１位！    発売された今日いきなり１位！ TUBMでは2021年の時にレゲエチャートで１位取って以来ですね！素晴らしい！Humming君のプロダクションもパズ君のリリックもカッコいいしfeatで入ってるキムライオ…\n\nCategory: Our NFTs\n[NFT] – Samurai Switch    更新日: 2023年2月8日 RouteNoteへの登録がイマイチ難しいという声があったため収益の分配方法を単純化しました！このSamurai SwitchのNFTを保持しているウォレットに毎月MAT…\n\nCategory: おすすめの楽曲\nVisages – Lunar Eclipse Feat. Strategy    この曲は友人であり尊敬するドラムンのProducerでもあるItti君にリンク送ってもらった曲ですが、ヤバ過ぎた。1985って言うレーベルは有名なんで知ってはいたのですが最近こんな事やってるとか思って…"},{"title":"Releases","url":"https:\/\/tubm.tokyo\/tunes\/","text":"TUBMのReleaseのリストです:\n\nRAGGA-G, Manish-T, KillA808 Follow Wi Now Release date: 2023-09-30\nPAZOODOG, KillA808 Scent of Dreams Release date: 2023-08-08\nRAGGA-G, T-MAN, Hayatobeatz, KillA808 ジャメイカの音楽で Release date: 2023-06-30\nRAGGA-G, TAMA-ANT, NSS TAX Release date: 2023-06-06\nRAGGA-G, PAZOODOG, KillA808 Samurai Switch Release date: 2023-01-30\nPAZOODOG, Hummingbird, キムライオン DUBBLE UP Release date: 2023-01-11\nKillA808, Hayatobeatz, TheInvaezn, Viral Chill Intense 2020ish (Instrumental) Release date: 2022-12-09\nPAZOODOG, RAGGA-G, Hayatobeatz SAYONARA Release date: 2022-03-25\nRAGGA-G, PAZOODOG, KillA808, Hayatobeatz SOUNDTRIP Release date: 2021-10-20\nPAZOODOG, KillA808 Night on Earth Release date: 2021-08-04\nGash, Neo Nao, Hayatobeatz Chakuchi Release date: 2021-07-21\nPAZOODOG, KillA808, Hayatobeatz PAZOODOG 2020 EP Release date: 2021-06-20"},{"title":"Mixing & Mastering","url":"https:\/\/tubm.tokyo\/mixing\/","text":"Mixing & Mastering\n\n現在担当が業務過多の為お受けできなくなっております。再開したらまたこのページやSNSでお知らせいたします。大変申し訳有りませんが、ご理解の程よろしくお願いいたします。   \n\nはじめにお読みください\n・初めてのお客様に限り無料サンプルとして60秒程度のカットでMIXいたします。MIXされた内容で満足された場合のみお支払→フルミックスという形でご利用可能です。\n・ゲスト購入が可能です。また匿名でのご依頼も可能です。Emailアドレスがあればご依頼頂けます。\n・初めての取引が不安だと感じるお客様は アズカリ でのお取引をお勧めしています。この方法だと売り手側買い手側双方が安全に取引できます。\n・決済方法には、クレジットカード、Apple Pay、Google Pay、Line Pay、MATIC等があります。 \n・スキルサービスの性質上、作業に入ってからのキャンセルは原則お受けできません。ご了承ください。また、方向性を大きく変えたり録音し直す等の場合は追加料金が発生する場合がございます。\n・作業の内容によっては追加オプションのご購入をお願いしています。サービス詳細に記載していますのでご確認ください。ご不明な点は コンタクトページ（https:\/\/tubm.tokyo\/contact\/）からお問合せください。\n\nミキシングサービス:\n¥ 9,000   ボーカルMIXING       \n¥ 15,000   楽曲MIXING         \n\n追加オプションサービス:\n¥ 3,000   ピッチ・タイミング修正       \n¥ 3,000   ハモリ生成       \n¥ 500   追加トラック       \n¥ 3,000   ステム納品         \n\n使用機材:\nDAWs:\nAbleton Live (Main), Logic Pro, ProTools, Studio One\nHardwares:\nMetric Halo 2882 3d（インターフェース）, Solid State Logic SiX（サミングミキサー）, Manley Stereo Variable Mu Mastering Limiter Compressor     Monitors Focal Alpha 80 x 2, Handmade 18″ Subwoofer, Audeze LCD-2\nPlugins:\nSlate Digital（バンドル）, SoundToys（バンドル）, FabFilter（バンドル）, Waves（バンドル）, Izotope（バンドル）, A.O.M（バンドル）, Brainworks（バンドル）, SPL IRON, Lindell 80 Channel Strip     その他諸々     \n\nレビュー・クチコミ:\nExcellent              Based on  7 reviews\n・Nightout Gallery    2023-06-23         Very cool Mixing !!!\n・泉大貴    2022-02-25         何曲も編集して頂いてどの曲もめちゃくちゃセンスよくミックスしてくれていつもお世話になってます！ とても親身に対応してくれて、ミックス以外の事でも色々と教えて頂いたりして本当に感謝しかないです！！ これからも長く付き合っていきたいと思えるエンジニアさんです！！\n・billy b    2021-12-25         オリジナル曲のMIX\/マスタリングをいただきました。 MIX\/マスタリングいただいたのは今回で3回目のリピーターです。 今回も全ての要望を叶えていただたき、全パートがしっかりきこえる最高のバランスでした……！ また、こちらがお願いした内容でMIXいただくのみならず　曲の意図やコンセプトを汲んだ上でエンジニア視点のご提案もくださるので表現したかったものが本当によく伝わる音になります。 今回もこだわりいっぱいの曲に同じ熱量とそれ以上の技術で返してくださって本当にありがとうございました！またお願い致します。\n・龍桜（-RYO-）    2021-12-07         2020年末頃からお世話になり、 2021年、年間通してほとんどをお世話になり、その都度アドバイスや提案を頂いては成長を感じる事が出来ました。 頼れるお兄さん的に気軽な事からもお話しやすく、音楽の事となると真摯に向き合って頂けます。 今後ともよろしくお願いしますm(_ _)m\n・河村直樹    2021-12-05         ミックスの技術、環境、雰囲気、人柄込み込みで星5つ。\n・SHOMRS    2021-12-03         mixing & mastering very gooooood!! Thank you always for your support 🙂\n・Aki Fujihana    2021-11-24         丁寧なやりとりや、ヒアリング、そしてクオリティー全てがプロフェッショナルでした ありがとうございました\n\nエンジニア:\n一般名称: KillA808\n・West London 大学 BA 音楽科 及び BSc 音楽技術 卒業  ・音楽大学一般課程（音楽理論、演奏、音楽教育、作曲編曲等）   ・音楽技術（DAW を使った楽曲制作、ミキシング、マスタリング、音響科学及びオーディオサイエンス）\n・2004年に開催された登竜門音楽オーディション – ダンス系部門にて最優秀賞を獲得、UKのSinister Recordsというレーベルを紹介して頂き、そこで楽曲制作、RECやサウンドデザイン、ミキシング等の個人レッスンを受けさせてもらう。同時にFunkatech Recordsと繋がり構成やミキシングに関して様々なアドバイスを戴く。\n・2010年から現在迄、Deafmuted Records（チェコ）、Onset Audio（アメリカ）、Nyctophilia Recordings（UK）等のDrum&Bassレーベル中心に楽曲契約を結びEPをリリース。近日中にも更にリリースが控えている。\n・2018年にはイギリスのMetalheadz, AMARのプロデューサーAMIT氏を東京に招いてオーディオマスタークラスを開催。  講義の内容は主にどこまで細分化したミックスを行うか、低音の揺らし方、体で感じる音、耳で聴く音、脳の錯覚を利用した音作り等非常に面白い内容に感銘を受ける。\n・2020年にはジャンルの幅を広げる為に国内外幾つかのレーベル及びレコーディングスタジオからミキシング業務の外注を積極的に請負い始める。\n・2021年に作曲及びミックス・マスタリングを手掛けた楽曲がiTunesのレゲエチャート１位を獲得。         \n\nミキシング作品ポートフォリオ:\n許可を頂いたお客様やクレジットを頂いたお客様の作品を掲載しています。ジャンル入り混じってます。サムネでジャンルの判別してください（どの曲もメチャ良いです）。\n・SHOMRS - 'magic hour' (Official Music Video)\n・[Drill] PAZOODOG - Night on Earth (Prod. KillA808) | Tokyo Drill Massive 2021\n・693 - 693Floor (Official Music Video)\n・【MV】Crazy XXX \/ Stella Maris\n・【MV】しょこらください！\/ 堕落論\n・[D&B Hip-Hop] RAGGA-G & PAZOODOG - Samurai Switch (Prod. KillA808)\n・【オリジナルMV】いいように使われて捨てられる曲\n・SHOMRS - 'camellia' (Official Audio)\n・[Reggae] RAGGA-G & PAZOODOG - SOUNDTRIP (Prod. KillA808 x Hayatobeatz) | Tokyo Reggae Massive 2021\n・693 - Revolution (Official Music Video)\n・SHOMRS - 'Just Like This (feat. Raptor B)' (Remix)\n・あなたの影 \/ 龍桜\n・P[LR]AYER\n・[LoFi Hip-Hop] Gash & Neo Nao - Chakuchi (Prod. Hayatobeatz) | Nakameguro Ghetto Boyz 2021"},{"title":"Home","url":"https:\/\/tubm.tokyo\/","text":"Home\n\nレペゼン足立な謎のヒップホップレーベル、Tokyo Underground Beatz Massiveです。  重低音の扱いは世界一を目指してます。\n人工知能のチャットbot作りました。web上の情報をEmbeddingしてあります。なんでも質問してみて下さい！（画面右下のTUBM BOTです）\n\n・Releases – TUBM最新楽曲リリース情報\n・Blog – 知識特化系やたまにおもしろ系のブログやってます\n・DUBPLATE – RAGGA-G from B-REGGER’S!!!\n・Mixing & Mastering – 最近業務過多の為受け付けてません\n・NFTs – TUBMの音楽系NFT❗❗❗\n・Beat Store – まだOpenできてません…\n\nMusic Videos:\n・[Reggae Drill] RAGGA-G & Manish-T - Follow Wi Now (Prod. KillA808) | Reggae Drill Massive 2023\n・[Drill] PAZOODOG - Scent of Dreams (Prod. KillA808) | Tokyo Drill Massive 2023\n・[Reggae] RAGGA-G & T-MAN - ジャメイカの音楽で feat. KillA808 (Prod. Hayatobeatz) | Tokyo Reggae Massive 2023\n・[Political Hip-Hop] RAGGA-G & TAMA ANT - TAX (Prod. NSS)\n・[D&B Hip-Hop] RAGGA-G & PAZOODOG - Samurai Switch (Prod. KillA808)\n・ROUTINE \/ PAZOODOG meets Hummingbird\n・[Drill] PAZOODOG - Night on Earth (Prod. KillA808) | Tokyo Drill Massive 2021\n・Traffic Jam (feat. キムライオン) \/ PAZOODOG meets Hummingbird\n・[Reggae] RAGGA-G & PAZOODOG - SOUNDTRIP (Prod. KillA808 x Hayatobeatz) | Tokyo Reggae Massive 2021\n・Couch Lock \/ PAZOODOG meets Hummingbird\n・[Sad Hip-Hop] PAZOODOG - SAYONARA feat. RAGGA-G (Prod. Hayatobeatz) | Sad J-HIPHOP 2022\n・TOKIO \/ PAZOODOG meets Hummingbird"},{"title":"ステム納品","url":"https:\/\/tubm.tokyo\/product\/trackout\/","text":"ステム納品【追加オプションです】\n¥ 3,000\n\nミキシングした楽曲をステムに別けて納品します。\nTrack Outとも言います。\nステムに別ける事により、ご自分でアレンジを試したりREMIXバージョンの作成などを楽しめる様になります。\n\nカテゴリー:  Mixing Options\n\n他の追加オプションサービス:\n\n¥ 3,000   ピッチ・タイミング修正\n¥ 3,000   ハモリ生成\n¥ 500   追加トラック\n¥ 3,000   ステム納品"},{"title":"ボーカルMIXING","url":"https:\/\/tubm.tokyo\/product\/vocal-mixing\/","text":"ボーカルMIXING【マスタリングまで込みです。】\n¥ 9,000\n\nラップや歌ってみた等の様にボーカルと2MIXのインストやビートをMIXするサービスです。\n『抜けぬなら、抜かしてみせます、貴方のヴォイス』をモットーに、実績豊富な音大卒プロエンジニアが高品質なボーカルMIXINGを提供致します。\n\n国内外問わず、Pop系のシンガーソングライター様からMIX依頼も頂く事もありますし、クラブ系トラックメーカーからのご依頼もあります。レーベル及びレコスタ等からもお仕事も頂いておりますので幅広いジャンルで対応します。\nMIX後にはボーカルが『Cut Through』した状態になり、ご自身の歌声を商業レベルで聴けるようになります。\n\nこのサービスは８ボーカルトラック迄のMIXINGとなります。８トラック以上になる場合は追加オプションサービスのご購入をご検討下さい。\n\nまた、ピッチ・タイミング修正やハモリ生成も追加オプションサービスにて承っています。ただし数ヶ所程度の簡単なピッチ・タイミング修正程度でしたら無料でやります。その他の追加オプションサービスもご確認下さい。\n\nサービス要件:\n・インスト（オケ）の2MIX、及び８トラック迄のボーカルトラックをお送りください。\n・８トラック以上になる場合は、追加オプションサービスのご購入をご検討ください（トラック数が少なくてもエフェクトを多用する種類のミックスの場合は８トラック超える事もありますので気になる方は一度 こちら からご連絡下さい）。\n・キー及びBPM等の曲情報を事前に教えて頂けるとスムーズにミックスに取りかかれますのでご協力お願い致します。\n・インスト（オケ）は可能な限り、リミッターやコンプレッサーが掛かっていない、-6dBFS ~ -3dBFSピークのWAVまたはAIFをご用意下さい。入手が難しい場合はマスタリングされた物でも大丈夫ですが、曲によってはダイナミックレンジが狭くなる感は否めないです。\n・ボーカルトラックの（パラ）データは0dBFSを超えない様にしてください。トラックを書き出す時にマスターチャンネルが赤に行ってなければOKです。\n\n納期:\n最短で約３〜４営業日となります。繁忙期には１〜２週間頂く場合もございます。お急ぎの方はご注文前にコンタクトページから納品状況をご確認ください。\n\n他の追加オプションサービス:\n¥ 3,000   ピッチ・タイミング修正\n¥ 3,000   ハモリ生成\n¥ 500   追加トラック\n¥ 3,000   ステム納品\n\nFAQ:\nQ: MP3でも受け付けてますか？   A: 受け付けてます。ただし非圧縮（WavやAif）と比べると音質は落ちる可能性ありです。\nQ: アカペラのミックスはできますか？   A:   全てのジャンルに対応しています！"},{"title":"楽曲MIXING","url":"https:\/\/tubm.tokyo\/product\/stem-mixing\/","text":"楽曲MIXING\n¥ 15,000【マスタリングまで込みです。】\n\n（ボーカル含む）楽曲全体をステム（パラデータ）からMIXするサービスです。\n『揺れぬなら、揺らしてみせます、超低音』をモットーに、実績豊富な音大卒プロエンジニアによる超低域から高域まで詳細に拘ったMIXINGを提供致します。\n\nミキシングは良質な曲を作る上で最も重要な要素の1つです。プロフェッショナルにMIXされた曲はそれだけでも人目を引きます。\nこのMIXサービスは、各ステム（トラック）を個別に処理してMIXに馴染ませバランスが取れる様に調整致します。\n詳細かつ繊細なMIXINGにより各ステムは非常にスムーズになりマスタリングに最適化されます。\n\nこのサービスは１６トラック迄のMIXINGとなります。１６トラック以上になる場合は追加オプションサービスのご購入をご検討下さい。\n\nまた、ピッチ・タイミング修正やハモリ生成も追加オプションサービスにて承っています。ただし数ヶ所程度の簡単なピッチ・タイミング修正程度でしたら無料でやります。その他の追加オプションサービスもご確認下さい。\n\nサービス要件:\n・１６トラック迄のステム（パラデータ）をお送りください。\n・１６トラック以上になる場合は、追加オプションサービスのご購入をご検討ください（トラック数が少なくてもエフェクトを多用する種類のミックスの場合は８トラック超える事もありますので気になる方は一度 こちら からご連絡下さい）。\n・キー及びBPM等の曲情報を事前に教えて頂けるとスムーズにミックスに取りかかれますのでご協力お願い致します。\n・各ステム（パラデータ）は0dBFSを超えない様にしてください。トラックを書き出す時にマスターチャンネルが赤に行ってなければOKです。\n\n納期:\n最短で約３〜４営業日となります。繁忙期には１〜２週間頂く場合もございます。お急ぎの方はご注文前にコンタクトページから納品状況をご確認ください。\n\n他の追加オプションサービス:\n¥ 3,000   ピッチ・タイミング修正\n¥ 3,000   ハモリ生成\n¥ 500   追加トラック\n¥ 3,000   ステム納品      \n\nFAQ:\nQ: MP3でも受け付けてますか？   A: 受け付けてます。ただし非圧縮（WavやAif）と比べると音質は落ちる可能性ありです。"},{"title":"DUBPLATE","url":"https:\/\/tubm.tokyo\/product\/dubplate\/","text":"DUBPLATE\n¥ 15,000\n\nRAGGA-GさんがTUBMスタジオで録音・MIXしてDUBPLATEを納品します。\n\nカテゴリー:  DUBPLATE\n\nライブ現場で使いたい場合などはDUBPLATEで十分なクオリティーとなります。\n\n商業的に流通させたい、DJ MIXに入れたい、など配信に使用する場合はDUBPLATE + MIXをお勧めしていますが、DUBPLATEでもある程度しっかりしたクオリティーは保っています。\n\n納期について:\n納期についてはコンタクトページ都度ご確認をお願いいたします。\nスタジオでのレコーディング日を合わせる必要がある為、納期には余裕を持って頂ける様お願いいたします。                                                                                                                                                                      "},{"title":"DUBPLATE + MIX","url":"https:\/\/tubm.tokyo\/product\/dubplate-mix\/","text":"DUBPLATE + MIX\n¥ 22,000\n\nRAGGA-GさんがTUBMスタジオで録音・MIXしてDUBPLATEを納品します。\n\nライブ現場で使いたい場合などはDUBPLATEで十分なクオリティーとなります。\n\n商業的に流通させたい、DJ MIXに入れたい、など配信に使用する場合はDUBPLATE + MIXをお勧めしていますがDUBPLATEでもある程度しっかりしたクオリティーは保っています。\n\n納期について:\n納期についてはコンタクトページ都度ご確認をお願いいたします。\nスタジオでのレコーディング日を合わせる必要がある為、納期には余裕を持って頂ける様お願いいたします。"},{"title":"ハモリ生成","url":"https:\/\/tubm.tokyo\/product\/harmonize\/","text":"ハモリ生成【追加オプションです】\n¥ 3,000\n\nメインボーカルからハモリを生成します。サビ（Hook）等で厚みを出したり広がりを持たせる事ができます。\nハモリ箇所を指定してください。可能であれば譜面またはコード進行（またはセンターキーだけでも大丈夫です）をご用意してください。\n\nカテゴリー:  Mixing Options\n\n他の追加オプションサービス:\n\n¥ 3,000   ピッチ・タイミング修正\n¥ 3,000   ハモリ生成\n¥ 500   追加トラック\n¥ 3,000   ステム納品"},{"title":"ピッチ・タイミング修正","url":"https:\/\/tubm.tokyo\/product\/pitchcorrection\/","text":"ピッチ・タイミング修正【追加オプションです】\n¥ 3,000\n\nピッチとタイミングを修正します。\n主にボーカルの音程・タイミングのズレを修正します。楽器類でも可能ですが性質上調整できない楽器もあります。数ヶ所程度でしたら無償でやりますので、こちらのオプションの購入は不要です。\nピッチを完全に揃えたい方やオートチューン系のエフェクトが欲しい方もこちらをご購入下さい。\n\nカテゴリー:  Mixing Options\n\n他の追加オプションサービス:\n\n¥ 3,000   ピッチ・タイミング修正\n¥ 3,000   ハモリ生成\n¥ 500   追加トラック\n¥ 3,000   ステム納品"},{"title":"追加トラック","url":"https:\/\/tubm.tokyo\/product\/additional-track\/","text":"追加トラック【追加オプションです】\n¥ 500\n\n規定内のトラック数で収まらない場合はこちらをご購入下さい。       １トラックあたりの価格となります。必要なトラック数をご購入下さい。\n\nカテゴリー:  Mixing Options\n\n他の追加オプションサービス:\n\n¥ 3,000   ピッチ・タイミング修正\n¥ 3,000   ハモリ生成\n¥ 500   追加トラック\n¥ 3,000   ステム納品"},{"title":"追加オプションリスト","url":"https:\/\/tubm.tokyo\/product-category\/mixing-options\/","text":"追加オプションのリストは以下の通りです。\n¥ 3,000   ステム納品\n¥ 3,000   ハモリ生成\n¥ 3,000   ピッチ・タイミング修正\n¥ 500   追加トラック"},{"title":"Samurai Switch","url":"https:\/\/tubm.tokyo\/release\/samurai-switch\/","text":"Samurai Switch\nSingle 2023-01-30\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n\/\/ ABOUT\n2023年1月30日足立区から発信する新型Hip-Hop Tune！🔥🔥🔥\n \niTunesレゲエチャートの常連RAGGA-GとTUBMのAceラッパーPAZOODOGのコラボです！2021年にも１位取った二人です！😎\nProducerは最近ジャンルがHip-Hopなのか怪しくなってるKillA808でお届けします！🤪\n \n2023で１番Hip-HopじゃないHip-Hop目指してます！\nTUBMは基本足立区推しなので足立区系ヒップホップというジャンルを（勝手に）作りました！😎😎😎\n\n🎵Release info🎶\nNew form of Hip-Hop!😎\nReleased on 30th Jan 2023!🔥\nRAGGA-G (ex-Def Jam Japan\/Universal, currently head of B-REGGER’S)\nPAZOODOG (Tokyo Underground Beatz Massive)\nKillA808 (Deafmuted Records, Onset Audio, Auditive)\n\nYou may say “this isn’t a hip-hop”, but one day you’ll join us.\nMusic is a form of freedom, and this is what we call REAL TOKYO UNDERGROUND HIP-HOP MASSIVE!!!!!🔥🔥🔥\n(Yup, we know this is d’n’b beat)\n\n\/\/ Artists:\nRAGGA-G (https:\/\/tubm.cool\/ragga-g)\nPAZOODOG (https:\/\/tubm.cool\/pazoodog)\n\/\/ Producer:\nKillA808 (https:\/\/tubm.cool\/killa808)\n\/\/ Music Video:\nBell Wood & Co (https:\/\/www.bell-wood-co.com\/)"},{"title":"DUBBLE UP","url":"https:\/\/tubm.tokyo\/release\/dubble-up\/","text":"DUBBLE UP\nEP 2023-01-11\n\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n🔥🔥🔥TUBM2023 1st Release! 🔥🔥🔥\n\n\/\/ ABOUT\nDUBなサウンドを提供しまくるレゲエ界のキラープロデューサーHummingbirdと多彩なジャンルをラップで押し切る多才な男PAZOODOGのコラボ作品です！\nマスタリングはShakkazombieのTsutchie様にやって頂きました！\n\n\/\/ Main Artist:\nPAZOODOG (https:\/\/tubm.cool\/pazoodog)\n\/\/ Featured Artist:\nキムライオン (https:\/\/tubm.tokyo\/artist\/kimlion\/)\n\/\/ Producer:\nHummingbird (https:\/\/hummingbirdub.studio.site\/)\n\nMastered by Tsutchie (Shakkazombie) \nMusic Video by Bell Wood & Co (https:\/\/www.bell-wood-co.com\/)\nSpecial Thanks for Shooting: Sound Bar Pure's (https:\/\/pures.club\/)"},{"title":"Chill Intense 2020ish (Instrumental)","url":"https:\/\/tubm.tokyo\/release\/chill-intense-2020\/","text":"Chill Intense 2020ish (Instrumental)\nAlbum 2022-12-09\n\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n\/\/ ABOUT\n2022年最後のリリースは12月らしくlofiや電子系チルなインストアルバムとなります🙂\nHayatobeatzとKillA808が中心となって2020年頃に制作していた１０曲をアルバムとして纏めました。\n現在All-timeで５万回近く再生された中々のステキ楽曲集です😎\n\nチルな時間のバックグラウンドMusicとして、仕事／勉強中のバックグラウンドMusicとして聴いていただければ幸いです <(_ _)>\n\n10 tracks of lofi, chill and electronic chill instrumental😎\nWe created these tracks in around 2020ish, and gathered them into an album.\nPlease come & check if you love lofi, chill, electronic music :)\n\n\/\/ Producers:\nKillA808 (https:\/\/tubm.cool\/killa808)\nHayatobeatz (https:\/\/tubm.cool\/hayatobeatz)\nViral (https:\/\/tubm.tokyo\/artist\/viral\/)"},{"title":"Chakuchi","url":"https:\/\/tubm.tokyo\/release\/chakuchi\/","text":"Chakuchi\nSingle 2021-07-21\n\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nListen on Deezer\nListen on Amazon\nListen on Soundcloud\n\n\/\/ ABOUT\n中目黒居酒屋系ラッパーのパイオニアと言えばこの二人で間違いない、Gash & Neo Nao がTUBMでカマします！\nHayatobeatz のLoFi Chillなビートにブッとい声、メロディーとラップを自在にブッ込むスタイルでひたすらエモいヒップホップ。是非チェックチェック！\n\nNakameguro Ghetto Boys “Gash & Neo Nao” doing their job on this lofi chill beat prod by Hayatobeatz.\nCheck out their phatty voices doing their melodies and rap! Thanx 🙂\n\n\/\/ Artists:\nGash (https:\/\/tubm.cool\/gash)\nNeo Nao (https:\/\/tubm.cool\/neonao)\n\/\/ Producer:\nHayatobeatz (https:\/\/tubm.cool\/hayatobeatz)"},{"title":"SOUNDTRIP","url":"https:\/\/tubm.tokyo\/release\/soundtrip\/","text":"SOUNDTRIP\nSingle 2021-10-20\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\nListen on Soundcloud\n\n\/\/ ABOUT\n天才か変態なイカれた年配達による過激なレゲエ！TUBMから発信！\nReggae song by Tokyo's finest underground deejays RAGGA-G & PAZOODOG, prod by KillA808 & Hayatobeatz!  \n\n\/\/ Artists:\nRAGGA-G: (https:\/\/tubm.cool\/ragga-g)\nPAZOODOG: (https:\/\/tubm.cool\/pazoodog)\n\/\/ Producers:\nKillA808: (https:\/\/tubm.cool\/killa808)\nHayatobeatz: (https:\/\/tubm.cool\/hayatobeatz)"},{"title":"PAZOODOG 2020 EP","url":"https:\/\/tubm.tokyo\/release\/pazoodog2020ep\/","text":"PAZOODOG 2020\nEP 2021-06-20\n\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\nListen on Soundcloud\n\n\/\/ Artist:\nPAZOODOG (https:\/\/tubm.cool\/pazoodog)\n\/\/ Producers:\nKillA808 (https:\/\/tubm.cool\/killa808)\nHayatobeatz (https:\/\/tubm.cool\/hayatobeatz)"},{"title":"SAYONARA","url":"https:\/\/tubm.tokyo\/release\/sayonara\/","text":"SAYONARA\nSingle 2022-03-25\n\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\nListen on Soundcloud\n\n＊悲しいコンテンツが含まれますので繊細な方は視聴をお控えください。\n\n\/\/ ABOUT\n犬好きによる犬好きの為の犬好きなヒップホップ曲です。\nSad Rap song by Tokyo's finest underground rapper PAZOODOG and featuring RAGGA-G, prod by Hayatobeatz. \n\n\/\/ Artists:\nPAZOODOG: (https:\/\/tubm.cool\/pazoodog)\nfeat. RAGGA-G: (https:\/\/tubm.cool\/ragga-g)\n\/\/ Producer:\nHayatobeatz: (https:\/\/tubm.cool\/hayatobeatz)\n\n\/\/ Illustrator:\nKANAE: (https:\/\/illust-design.jimdosite.com)"},{"title":"TAX","url":"https:\/\/tubm.tokyo\/release\/tax\/","text":"TAX\nSingle 2023-06-06\n\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\nDownload from Napster\n\n\/\/ ABOUT\n2023年系新型Hip-Hop！\niTunesレゲエチャートの常連RAGGA-Gと、ちょっと聴いた事ないレベルでぶっといダミ声に定評があるTAMA ANTのコラボ作品です！\n\nプロデューサーは今回TUBM初参加の国籍、性別全てが謎に包まれたNSS！\n例のアメリカのあのラッパーだとか某政治家の隠し子だとか色々な噂がありすぎて謎なプロデューサーですが、とりあえず病んでるサウンドデザインとMIXに関してはハンパないレベルにいるSick Producer - NSS！色々ヤバイです！\n\n💬メッセージ💬\n当たり前の事が当たり前じゃない狂った日常に終止符を🔥\n\n税金を払いたくないんじゃない！\n税金の使い道をクリアにして欲しい。国民の為に正しく税金を使ってほしい。\nただそれだけ。\n一人一人が間違った状況に声をあげよう『FUC❌ TH❌ TA❌❗️❗️❗️』\n\n国民税金負担率は50%に届く勢いの日本。\n税率は世界でも安い方とか言うけど税金の種類は半端ない日本。\n来年には森林環境税とか言う税金も追加されるって、、、このまま行けば空気税まで発生しそうな日本。\n\n何十兆円もの金が海外にばら撒かれている近年、外貨準備金は税金じゃないって政治家もいるけど、その全ての出所が明確になっている訳でもない。\nいずれにせよ国内に富を反映せず多国籍化した大企業に利益誘導し、彼らの懐に富を移転していく経済・政治構造では生活の改善も景気回復の余地も無いことは既に実証された。\n\n最後にもう一度『FUC❌ TH❌ TA❌❗️❗️❗️』\n\nIn 2023, TUBM leads the new type of Tokyo Underground Hip-Hop！\n\nThis is a collab work of RAGGA-G (ex-Def Jam Japan\/Universal, currently head of B-REGGER’S) and TAMA ANT, who is well known for his uniquely phat phat voice that is probably something you've never ever heard! \n\nThis sick producer is called NSS, kinda \"anonymous\" producer, that we don't even know his\/her nationality, gender, name or whatsoever. \nAll we can say is, this producer is sick as hell in sound-designing and mixing. \n\n💬Message💬\nLyrically, the song has some nice message to our Japanese Government. \n\n\/\/ Artists: \nRAGGA-G (tubm.cool\/ragga-g)\nTAMA-ANT (tubm.cool\/tama-ant)\n\/\/ Producer: \nNSS (tubm.cool\/nss)\n\/\/ Music Video:\nDigital Muffia"},{"title":"ジャメイカの音楽で","url":"https:\/\/tubm.tokyo\/release\/jamaica-ongaku\/","text":"ジャメイカの音楽で\nSingle 2023-06-30\n\nListen on Spotify\nListen on Apple\nMusic Download from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n\/\/ ABOUT\n2023年系新型レゲエ❗\niTunesレゲエチャートの常連RAGGA-Gと、様々なLiveトーナメントでの優勝経験やレゲエチャート、REGGAE ZION共に1位を獲得してるT-MANのコラボです😎\n爽やかだけどエグい唄書いてきます❗🔥🔥\n\n作曲編曲ミキシングは2年ぶりくらいにHayatobeatzとKillA808のコンビでお届けします！何故かコラボだと売れ線になります❗💪\n\nこの曲はひたすら日本の良いとこ歌ってるいい曲ですね😌🌿🕯\n😎日本政府は問題だけどそれ以外では俺らこの国が一番😎😎\n\nIn 2023, TUBM leads the new type of Tokyo Underground Reggae！\n\nThis is a collab work of RAGGA-G (ex-Def Jam Japan\/Universal, currently head of B-REGGER’S) and T-MAN who is currently pretty busy with his gigs everywhere in Japan and been number 1 on various Reggae charts! 😎\n\nProducers: KillA808 and Hayatobeatz❗💪\n\n💬Message💬\nAnyone who is willing to visit our country, check this. \nThis is pretty much our usual life, and we absolutely love this country! ❗🔥🔥 (despite we do not love at all our government)\n\n\/\/ Artists: \nRAGGA-G (tubm.cool\/ragga-g)\nT-MAN (tubm.cool\/t-man)\n\/\/ Producers: \nKillA808 (tubm.cool\/killa808)\nHayatobeatz (tubm.cool\/hayatobeatz)\n\/\/ Music Video:\nDigital Muffia"},{"title":"Follow Wi Now","url":"https:\/\/tubm.tokyo\/release\/follow-wi-now\/","text":"Follow Wi Now\nSingle 2023-09-30\n\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n絶対聞いたことないレゲエチューン、足立区代表TUBMからリリースです❗🔥🔥\n和のDrillビートが二人のDeeJayによりレゲエになっちゃった面白い曲なので、Reggae Drillというジャンルを勝手に作る事にしました😎😎\n\n今回は三つのレーベルの代表者たちで制作された曲で面白い組み合わせです😎😎😎\n\nB-REGGER'Sからお馴染みRAGGA-G（https:\/\/tubm.cool\/ragga-g）\n\nTUBMと同じ様にDopeなサウンドを求めるGLOBALiST PRODUCTIONからはManish-T（https:\/\/tubm.cool\/manish-t）\n\nProductionはTUBMのKillA808（https:\/\/tubm.cool\/killa808）です❗🔥\n\n和のテイストを感じるDrill Beatにぶっ込まれるManish-TのメロディックなFlowと声質だけでReggae VibeバッキバキのRAGGA-GのReggae Drill、是非チェックしてください🔥🔥🔥\n\n\/\/ Music Video:\n映像はお馴染みDigital Muffiaです！毎回良い感じにクオリティ上げてきます❗映像も楽しんでください😊😊\n\nIntroducing a reggae tune you've never heard before, released by TUBM, representing Tokyo Underground Music❗🔥🔥\nWe've created an interesting song where a Japanese Drill beat is transformed into reggae by voice of two DeeJays. So, we've decided to arbitrarily create a new genre called Reggae Drill 😎😎\n\nThis time, the song is produced by the heads of three different labels, making for an interesting combination 😎😎😎\n\nFrom B-REGGER'S, we have familiar name, RAGGA-G (https:\/\/tubm.cool\/ragga-g).\n\nFrom GLOBALiST PRODUCTION, which seeks dope sounds just like TUBM, we have Manish-T (https:\/\/tubm.cool\/manish-t).\n\nThe production is by TUBM's KillA808 (https:\/\/tubm.cool\/killa808)❗🔥\n\nWith a Drill Beat infused with a Japanese taste as the foundation, layered with Manish-T's melodic flow and unique vocal quality, and topped off by RAGGA-G, who is so much of a Reggae man that his vocal tone alone brings a Reggae vibe, please check out this Reggae Drill 🔥🔥🔥\n\n\/\/ Music Video:\nDigital Muffia"},{"title":"Scent of Dreams","url":"https:\/\/tubm.tokyo\/release\/scent-of-dreams\/","text":"Scent of Dreams\nSingle 2023-08-08\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n\/\/ ABOUT\n前回各プラットフォーム合わせて10万回強の再生回数を記録したTokyo Drillシリーズ第２弾です❗🔥🔥 \n今回も信頼と実績のPAZOODOGとプロデューサーKillA808がお届けします😎😎😎\n脳天ブッ込むアブナイ低音とPAZOODOGの畳みかけるカラフルなラップが売りの、完全2023年型最先端のHip-Hopを是非チェックしてください🔥🔥 🔥\n\nSound that pierces into your brain… Lyric by PAZOODOG and Beat and Mixed by Producer KillA808❗🔥🔥 \nWelcome back to the second installment of the Tokyo Drill Massive Series, which collectively rocked up over 100,000 plays across various platforms last time! 🎶😎\nOnce again, we're bringing you killer bass beats combined with PAZOODOG's flow that adds a burst of color to this cutting-edge Hip-Hop of 2023. 😎😎😎 Don't miss out! 🔥🔥🔥\n\n\/\/ Artist:\nPAZOODOG (https:\/\/tubm.cool\/pazoodog\/)\n\/\/ Producer:\nKillA808 (https:\/\/tubm.cool\/killa808\/)\n\/\/ Music Video:\nBell Wood & Co (https:\/\/www.bell-wood-co.com\/)"},{"title":"Night on Earth","url":"https:\/\/tubm.tokyo\/release\/night-on-earth\/","text":"Night on Earth\nSingle 2021-08-04\n\nListen on Emanate\nListen on Spotify\nListen on Apple Music\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\nListen on Soundcloud\n\n\/\/ ABOUT\n音で突き刺す貴方の脳天。\n信頼と実績のPAZOODOGとProd. KillA808が新曲をお届けします。\nKillA808による世界最先端のUKドリルビートにPAZOODOGのdouble-time（倍テン）ラップとメロディックなHookがカラフルに展開する新感覚ジャンルTokyo Drillをリリース、チェックチェック！\n\nSound that pierces into your brain… Music by PAZOODOG and Prod. KillA808.  \nMelodic hook and double-time rap on cutting-edge drill beat. We call this genre Tokyo Drill. Check Check! \n\n\/\/ Artist:\nPAZOODOG (https:\/\/tubm.cool\/pazoodog)\n\/\/ Producer:\nKillA808 (https:\/\/tubm.cool\/killa808)"},{"title":"My Road","url":"https:\/\/tubm.tokyo\/release\/my-road\/","text":"My Road\nSingle 2023-10-30\n\nListen on Spotify\nListen on Apple Music\nDownload from iTunes\nWatch on YouTube\nListen on AWA\nListen on Deezer\nListen on Amazon\n\n\/\/ ABOUT\n色々と新しい音です！メロディックなFuture Jungle系のビートにレゲエの要素も感じる2023年型新ジャンル、Future Dub Jungleってのを勝手に作りました❗🔥🔥\n\n世界から注目を集めるDUB業界のキラープロデューサーといえばこの人、HummingbirdがTUBMから５作目のリリースです😎😎\n\nDeejayはお馴染み、TUBMのAceラッパーPAZOODOGと、コロンビアミュージックやDef Jamからのリリースを経て、現在B-REGGER’S代表のRAGGA-Gのコンビでお届けします🔥🔥🔥\n\n３人ともiTunesレゲエチャートで一位を取っている実力です😎🔥❗\n\nIntroducing a new sound! We've created a new genre for 2023 called Future Dub Jungle, which features melodic Future Jungle beats with elements of Reggae! 🔥🔥\n\nWhen it comes to killer production in the DUB industry, look no further than Hummingbird, who is releasing his fifth work from TUBM. 😎😎\n\nDeejays are the familiar duo, TUBM's Ace rapper PAZOODOG, and RAGGA-G who has released tunes from Colombian music and Def Jam, currently head of B-REGGER'S🔥🔥🔥\n\nAll three have the talent to get number one spot on the iTunes Reggae chart😎🔥❗\n\n\/\/ Artists: \nRAGGA-G (https:\/\/tubm.cool\/ragga-g)\nPAZOODOG (https:\/\/tubm.cool\/pazoodog)\n\n\/\/ Producer:\nHummingbird (https:\/\/hummingbirdub.studio.site\/)\n\nMastered by Tsutchie (Shakkazombie)\n\n\/\/ Music Video:\nDigital Muffia"}]